"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
/**
 * Credit https://github.com/hasanayan/craco-module-federation
 */
var path = require('path');
var _require = require('dotenv-expand'),
  expand = _require.expand;
var _require2 = require('craco-module-federation'),
  originOverrideWebpackConfig = _require2.overrideWebpackConfig,
  overrideDevServerConfig = _require2.overrideDevServerConfig;
var overrideWebpackConfig = function overrideWebpackConfig(_ref) {
  var context = _ref.context,
    webpackConfig = _ref.webpackConfig,
    pluginOptions = _ref.pluginOptions;
  webpackConfig = originOverrideWebpackConfig({
    context: context,
    webpackConfig: webpackConfig,
    pluginOptions: _objectSpread({
      useNamedChunkIds: true
    }, pluginOptions)
  });
  // Avoid remote collision
  // https://webpack.js.org/concepts/module-federation/#collision-between-modules-from-different-remotes
  webpackConfig.output.uniqueName = pluginOptions.uniqueName;

  // React Refresh
  // https://github.com/pmmmwh/react-refresh-webpack-plugin/issues/394#issuecomment-877708732
  // The bug is examined by people, please follow the link for updates

  return webpackConfig;
};
module.exports = {
  overrideWebpackConfig: overrideWebpackConfig,
  overrideDevServerConfig: overrideDevServerConfig,
  enableHMR: function enableHMR() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var pathSep = path.sep;
    var rootDir = process.env.PWD;
    var env = process.env.NODE_ENV;
    var _bootstrapAppPath$ena = _objectSpread({
        bootstrapAppPath: "".concat(pathSep, "src").concat(pathSep, "bootstrap.app.tsx"),
        enabledEnvs: ['development']
      }, opts),
      bootstrapAppPath = _bootstrapAppPath$ena.bootstrapAppPath,
      enabledEnvs = _bootstrapAppPath$ena.enabledEnvs;
    if (enabledEnvs.includes(env)) expand({
      parsed: {
        REACT_APP_HMR: path.join(rootDir, bootstrapAppPath)
      }
    });
    return {
      overrideWebpackConfig: overrideWebpackConfig,
      overrideDevServerConfig: overrideDevServerConfig
    };
  }
};