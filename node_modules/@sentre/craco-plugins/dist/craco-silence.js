"use strict";

/**
 * Disable warnings & Minimal logs
 */

var path = require('path');
var overrideWebpackConfig = function overrideWebpackConfig(_ref) {
  var context = _ref.context,
    webpackConfig = _ref.webpackConfig,
    pluginOptions = _ref.pluginOptions;
  // Disable verbose stat
  webpackConfig.stats = 'errors-only';
  // Disable "Failed to parse source map"
  var pathSep = path.sep;
  webpackConfig.module.rules.forEach(function (rule) {
    var _rule$loader;
    if ((_rule$loader = rule.loader) !== null && _rule$loader !== void 0 && _rule$loader.includes("".concat(pathSep, "source-map-loader").concat(pathSep))) {
      var exclude = rule.exclude;
      if (typeof exclude === 'array') exclude.push(/node_modules/);else rule.exclude = [exclude, /node_modules/];
    }
  });
  return webpackConfig;
};
var overrideDevServerConfig = function overrideDevServerConfig(_ref2) {
  var devServerConfig = _ref2.devServerConfig,
    cracoConfig = _ref2.cracoConfig,
    pluginOptions = _ref2.pluginOptions,
    context = _ref2.context;
  devServerConfig.client.overlay = {
    warnings: false,
    errors: true
  };
  return devServerConfig;
};
module.exports = {
  overrideWebpackConfig: overrideWebpackConfig,
  overrideDevServerConfig: overrideDevServerConfig
};