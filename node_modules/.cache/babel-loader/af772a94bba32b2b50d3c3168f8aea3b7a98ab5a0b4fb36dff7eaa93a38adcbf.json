{"ast":null,"code":"import { BaseMessageSignerWalletAdapter, scopePollingDetectionStrategy, WalletAccountError, WalletAdapterNetwork, WalletConfigError, WalletConnectionError, WalletDisconnectedError, WalletDisconnectionError, WalletError, WalletLoadError, WalletNotConnectedError, WalletNotReadyError, WalletPublicKeyError, WalletReadyState, WalletSignMessageError, WalletSignTransactionError, WalletTimeoutError, WalletWindowBlockedError, WalletWindowClosedError } from '@solana/wallet-adapter-base';\nimport { PublicKey } from '@solana/web3.js';\nexport class BaseSolletWalletAdapter extends BaseMessageSignerWalletAdapter {\n  constructor() {\n    let {\n      provider,\n      network = WalletAdapterNetwork.Mainnet,\n      timeout = 10000\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    this.supportedTransactionVersions = null;\n    this._readyState = typeof window === 'undefined' || typeof document === 'undefined' ? WalletReadyState.Unsupported : WalletReadyState.NotDetected;\n    this._disconnected = () => {\n      const wallet = this._wallet;\n      if (wallet) {\n        wallet.off('disconnect', this._disconnected);\n        this._wallet = null;\n        this._publicKey = null;\n        this.emit('error', new WalletDisconnectedError());\n        this.emit('disconnect');\n      }\n    };\n    this._provider = provider;\n    this._network = network;\n    this._timeout = timeout;\n    this._connecting = false;\n    this._wallet = null;\n    this._publicKey = null;\n    if (this._readyState !== WalletReadyState.Unsupported) {\n      if (typeof this._provider === 'string') {\n        this._readyState = WalletReadyState.Loadable;\n      } else {\n        scopePollingDetectionStrategy(() => {\n          if (typeof window.sollet?.postMessage === 'function') {\n            this._readyState = WalletReadyState.Installed;\n            this.emit('readyStateChange', this._readyState);\n            return true;\n          }\n          return false;\n        });\n      }\n    }\n  }\n  get publicKey() {\n    return this._publicKey;\n  }\n  get connecting() {\n    return this._connecting;\n  }\n  get connected() {\n    return !!this._wallet?.connected;\n  }\n  get readyState() {\n    return this._readyState;\n  }\n  async connect() {\n    try {\n      if (this.connected || this.connecting) return;\n      if (this._readyState !== WalletReadyState.Loadable && this._readyState !== WalletReadyState.Installed) throw new WalletNotReadyError();\n      this._connecting = true;\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const provider = this._provider || window.sollet;\n      let SolWalletAdapterClass;\n      try {\n        SolWalletAdapterClass = (await import('@project-serum/sol-wallet-adapter')).default;\n      } catch (error) {\n        throw new WalletLoadError(error?.message, error);\n      }\n      let wallet;\n      try {\n        wallet = new SolWalletAdapterClass(provider, this._network);\n      } catch (error) {\n        throw new WalletConfigError(error?.message, error);\n      }\n      try {\n        // HACK: sol-wallet-adapter doesn't reject or emit an event if the popup or extension is closed or blocked\n        const handleDisconnect = wallet.handleDisconnect;\n        let timeout;\n        let interval;\n        try {\n          await new Promise((resolve, reject) => {\n            const connect = () => {\n              if (timeout) clearTimeout(timeout);\n              wallet.off('connect', connect);\n              resolve();\n            };\n            wallet.handleDisconnect = function () {\n              wallet.off('connect', connect);\n              reject(new WalletWindowClosedError());\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n              return handleDisconnect.apply(wallet, args);\n            };\n            wallet.on('connect', connect);\n            wallet.connect().catch(reason => {\n              wallet.off('connect', connect);\n              reject(reason);\n            });\n            if (typeof provider === 'string') {\n              let count = 0;\n              interval = setInterval(() => {\n                const popup = wallet._popup;\n                if (popup) {\n                  if (popup.closed) reject(new WalletWindowClosedError());\n                } else {\n                  if (count > 50) reject(new WalletWindowBlockedError());\n                }\n                count++;\n              }, 100);\n            } else {\n              // HACK: sol-wallet-adapter doesn't reject or emit an event if the extension is closed or ignored\n              timeout = setTimeout(() => reject(new WalletTimeoutError()), this._timeout);\n            }\n          });\n        } finally {\n          wallet.handleDisconnect = handleDisconnect;\n          if (interval) clearInterval(interval);\n        }\n      } catch (error) {\n        if (error instanceof WalletError) throw error;\n        throw new WalletConnectionError(error?.message, error);\n      }\n      if (!wallet.publicKey) throw new WalletAccountError();\n      let publicKey;\n      try {\n        publicKey = new PublicKey(wallet.publicKey.toBytes());\n      } catch (error) {\n        throw new WalletPublicKeyError(error?.message, error);\n      }\n      wallet.on('disconnect', this._disconnected);\n      this._wallet = wallet;\n      this._publicKey = publicKey;\n      this.emit('connect', publicKey);\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    } finally {\n      this._connecting = false;\n    }\n  }\n  async disconnect() {\n    const wallet = this._wallet;\n    if (wallet) {\n      wallet.off('disconnect', this._disconnected);\n      this._wallet = null;\n      this._publicKey = null;\n      // HACK: sol-wallet-adapter doesn't reliably fulfill its promise or emit an event on disconnect\n      const handleDisconnect = wallet.handleDisconnect;\n      try {\n        await new Promise((resolve, reject) => {\n          const timeout = setTimeout(() => resolve(), 250);\n          wallet.handleDisconnect = function () {\n            clearTimeout(timeout);\n            resolve();\n            // HACK: sol-wallet-adapter rejects with an uncaught promise error\n            wallet._responsePromises = new Map();\n            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              args[_key2] = arguments[_key2];\n            }\n            return handleDisconnect.apply(wallet, args);\n          };\n          wallet.disconnect().then(() => {\n            clearTimeout(timeout);\n            resolve();\n          }, error => {\n            clearTimeout(timeout);\n            // HACK: sol-wallet-adapter rejects with an error on disconnect\n            if (error?.message === 'Wallet disconnected') {\n              resolve();\n            } else {\n              reject(error);\n            }\n          });\n        });\n      } catch (error) {\n        this.emit('error', new WalletDisconnectionError(error?.message, error));\n      } finally {\n        wallet.handleDisconnect = handleDisconnect;\n      }\n    }\n    this.emit('disconnect');\n  }\n  async signTransaction(transaction) {\n    try {\n      const wallet = this._wallet;\n      if (!wallet) throw new WalletNotConnectedError();\n      try {\n        return (await wallet.signTransaction(transaction)) || transaction;\n      } catch (error) {\n        throw new WalletSignTransactionError(error?.message, error);\n      }\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n  async signAllTransactions(transactions) {\n    try {\n      const wallet = this._wallet;\n      if (!wallet) throw new WalletNotConnectedError();\n      try {\n        return (await wallet.signAllTransactions(transactions)) || transactions;\n      } catch (error) {\n        throw new WalletSignTransactionError(error?.message, error);\n      }\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n  async signMessage(message) {\n    try {\n      const wallet = this._wallet;\n      if (!wallet) throw new WalletNotConnectedError();\n      try {\n        const {\n          signature\n        } = await wallet.sign(message, 'utf8');\n        return Uint8Array.from(signature);\n      } catch (error) {\n        throw new WalletSignMessageError(error?.message, error);\n      }\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n}","map":{"version":3,"mappings":"AACA,SACIA,8BAA8B,EAC9BC,6BAA6B,EAC7BC,kBAAkB,EAClBC,oBAAoB,EACpBC,iBAAiB,EACjBC,qBAAqB,EACrBC,uBAAuB,EACvBC,wBAAwB,EACxBC,WAAW,EACXC,eAAe,EACfC,uBAAuB,EACvBC,mBAAmB,EACnBC,oBAAoB,EACpBC,gBAAgB,EAChBC,sBAAsB,EACtBC,0BAA0B,EAC1BC,kBAAkB,EAClBC,wBAAwB,EACxBC,uBAAuB,QACpB,6BAA6B;AAEpC,SAASC,SAAS,QAAQ,iBAAiB;AAkB3C,OAAM,MAAgBC,uBAAwB,SAAQpB,8BAA8B;EAchFqB,cAAiH;IAAA,IAArG;MAAEC,QAAQ;MAAEC,OAAO,GAAGpB,oBAAoB,CAACqB,OAAO;MAAEC,OAAO,GAAG;IAAK,wEAAgC,EAAE;IAC7G,KAAK,EAAE;IAdF,iCAA4B,GAAG,IAAI;IAQlC,gBAAW,GACjB,OAAOC,MAAM,KAAK,WAAW,IAAI,OAAOC,QAAQ,KAAK,WAAW,GAC1Dd,gBAAgB,CAACe,WAAW,GAC5Bf,gBAAgB,CAACgB,WAAW;IAkP9B,kBAAa,GAAG,MAAK;MACzB,MAAMC,MAAM,GAAG,IAAI,CAACC,OAAO;MAC3B,IAAID,MAAM,EAAE;QACRA,MAAM,CAACE,GAAG,CAAC,YAAY,EAAE,IAAI,CAACC,aAAa,CAAC;QAE5C,IAAI,CAACF,OAAO,GAAG,IAAI;QACnB,IAAI,CAACG,UAAU,GAAG,IAAI;QAEtB,IAAI,CAACC,IAAI,CAAC,OAAO,EAAE,IAAI7B,uBAAuB,EAAE,CAAC;QACjD,IAAI,CAAC6B,IAAI,CAAC,YAAY,CAAC;;IAE/B,CAAC;IAxPG,IAAI,CAACC,SAAS,GAAGd,QAAQ;IACzB,IAAI,CAACe,QAAQ,GAAGd,OAAO;IACvB,IAAI,CAACe,QAAQ,GAAGb,OAAO;IACvB,IAAI,CAACc,WAAW,GAAG,KAAK;IACxB,IAAI,CAACR,OAAO,GAAG,IAAI;IACnB,IAAI,CAACG,UAAU,GAAG,IAAI;IAEtB,IAAI,IAAI,CAACM,WAAW,KAAK3B,gBAAgB,CAACe,WAAW,EAAE;MACnD,IAAI,OAAO,IAAI,CAACQ,SAAS,KAAK,QAAQ,EAAE;QACpC,IAAI,CAACI,WAAW,GAAG3B,gBAAgB,CAAC4B,QAAQ;OAC/C,MAAM;QACHxC,6BAA6B,CAAC,MAAK;UAC/B,IAAI,OAAOyB,MAAM,CAACgB,MAAM,EAAEC,WAAW,KAAK,UAAU,EAAE;YAClD,IAAI,CAACH,WAAW,GAAG3B,gBAAgB,CAAC+B,SAAS;YAC7C,IAAI,CAACT,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAACK,WAAW,CAAC;YAC/C,OAAO,IAAI;;UAEf,OAAO,KAAK;QAChB,CAAC,CAAC;;;EAGd;EAEA,IAAIK,SAAS;IACT,OAAO,IAAI,CAACX,UAAU;EAC1B;EAEA,IAAIY,UAAU;IACV,OAAO,IAAI,CAACP,WAAW;EAC3B;EAEA,IAAIQ,SAAS;IACT,OAAO,CAAC,CAAC,IAAI,CAAChB,OAAO,EAAEgB,SAAS;EACpC;EAEA,IAAIC,UAAU;IACV,OAAO,IAAI,CAACR,WAAW;EAC3B;EAEA,MAAMS,OAAO;IACT,IAAI;MACA,IAAI,IAAI,CAACF,SAAS,IAAI,IAAI,CAACD,UAAU,EAAE;MACvC,IAAI,IAAI,CAACN,WAAW,KAAK3B,gBAAgB,CAAC4B,QAAQ,IAAI,IAAI,CAACD,WAAW,KAAK3B,gBAAgB,CAAC+B,SAAS,EACjG,MAAM,IAAIjC,mBAAmB,EAAE;MAEnC,IAAI,CAAC4B,WAAW,GAAG,IAAI;MAEvB;MACA,MAAMjB,QAAQ,GAAG,IAAI,CAACc,SAAS,IAAIV,MAAM,CAACgB,MAAO;MAEjD,IAAIQ,qBAA8C;MAClD,IAAI;QACAA,qBAAqB,GAAG,CAAC,MAAM,MAAM,CAAC,mCAAmC,CAAC,EAAEC,OAAO;OACtF,CAAC,OAAOC,KAAU,EAAE;QACjB,MAAM,IAAI3C,eAAe,CAAC2C,KAAK,EAAEC,OAAO,EAAED,KAAK,CAAC;;MAGpD,IAAItB,MAAwB;MAC5B,IAAI;QACAA,MAAM,GAAG,IAAIoB,qBAAqB,CAAC5B,QAAQ,EAAE,IAAI,CAACe,QAAQ,CAAC;OAC9D,CAAC,OAAOe,KAAU,EAAE;QACjB,MAAM,IAAIhD,iBAAiB,CAACgD,KAAK,EAAEC,OAAO,EAAED,KAAK,CAAC;;MAGtD,IAAI;QACA;QACA,MAAME,gBAAgB,GAAqCxB,MAAc,CAACwB,gBAAgB;QAC1F,IAAI7B,OAAiC;QACrC,IAAI8B,QAAkC;QACtC,IAAI;UACA,MAAM,IAAIC,OAAO,CAAO,CAACC,OAAO,EAAEC,MAAM,KAAI;YACxC,MAAMT,OAAO,GAAG,MAAK;cACjB,IAAIxB,OAAO,EAAEkC,YAAY,CAAClC,OAAO,CAAC;cAClCK,MAAM,CAACE,GAAG,CAAC,SAAS,EAAEiB,OAAO,CAAC;cAC9BQ,OAAO,EAAE;YACb,CAAC;YAEA3B,MAAc,CAACwB,gBAAgB,GAAG,YAAgC;cAC/DxB,MAAM,CAACE,GAAG,CAAC,SAAS,EAAEiB,OAAO,CAAC;cAC9BS,MAAM,CAAC,IAAIxC,uBAAuB,EAAE,CAAC;cAAC,kCAFH0C,IAAe;gBAAfA,IAAe;cAAA;cAGlD,OAAON,gBAAgB,CAACO,KAAK,CAAC/B,MAAM,EAAE8B,IAAI,CAAC;YAC/C,CAAC;YAED9B,MAAM,CAACgC,EAAE,CAAC,SAAS,EAAEb,OAAO,CAAC;YAE7BnB,MAAM,CAACmB,OAAO,EAAE,CAACc,KAAK,CAAEC,MAAW,IAAI;cACnClC,MAAM,CAACE,GAAG,CAAC,SAAS,EAAEiB,OAAO,CAAC;cAC9BS,MAAM,CAACM,MAAM,CAAC;YAClB,CAAC,CAAC;YAEF,IAAI,OAAO1C,QAAQ,KAAK,QAAQ,EAAE;cAC9B,IAAI2C,KAAK,GAAG,CAAC;cAEbV,QAAQ,GAAGW,WAAW,CAAC,MAAK;gBACxB,MAAMC,KAAK,GAAIrC,MAAc,CAACsC,MAAM;gBACpC,IAAID,KAAK,EAAE;kBACP,IAAIA,KAAK,CAACE,MAAM,EAAEX,MAAM,CAAC,IAAIxC,uBAAuB,EAAE,CAAC;iBAC1D,MAAM;kBACH,IAAI+C,KAAK,GAAG,EAAE,EAAEP,MAAM,CAAC,IAAIzC,wBAAwB,EAAE,CAAC;;gBAG1DgD,KAAK,EAAE;cACX,CAAC,EAAE,GAAG,CAAC;aACV,MAAM;cACH;cACAxC,OAAO,GAAG6C,UAAU,CAAC,MAAMZ,MAAM,CAAC,IAAI1C,kBAAkB,EAAE,CAAC,EAAE,IAAI,CAACsB,QAAQ,CAAC;;UAEnF,CAAC,CAAC;SACL,SAAS;UACLR,MAAc,CAACwB,gBAAgB,GAAGA,gBAAgB;UACnD,IAAIC,QAAQ,EAAEgB,aAAa,CAAChB,QAAQ,CAAC;;OAE5C,CAAC,OAAOH,KAAU,EAAE;QACjB,IAAIA,KAAK,YAAY5C,WAAW,EAAE,MAAM4C,KAAK;QAC7C,MAAM,IAAI/C,qBAAqB,CAAC+C,KAAK,EAAEC,OAAO,EAAED,KAAK,CAAC;;MAG1D,IAAI,CAACtB,MAAM,CAACe,SAAS,EAAE,MAAM,IAAI3C,kBAAkB,EAAE;MAErD,IAAI2C,SAAoB;MACxB,IAAI;QACAA,SAAS,GAAG,IAAI1B,SAAS,CAACW,MAAM,CAACe,SAAS,CAAC2B,OAAO,EAAE,CAAC;OACxD,CAAC,OAAOpB,KAAU,EAAE;QACjB,MAAM,IAAIxC,oBAAoB,CAACwC,KAAK,EAAEC,OAAO,EAAED,KAAK,CAAC;;MAGzDtB,MAAM,CAACgC,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC7B,aAAa,CAAC;MAE3C,IAAI,CAACF,OAAO,GAAGD,MAAM;MACrB,IAAI,CAACI,UAAU,GAAGW,SAAS;MAE3B,IAAI,CAACV,IAAI,CAAC,SAAS,EAAEU,SAAS,CAAC;KAClC,CAAC,OAAOO,KAAU,EAAE;MACjB,IAAI,CAACjB,IAAI,CAAC,OAAO,EAAEiB,KAAK,CAAC;MACzB,MAAMA,KAAK;KACd,SAAS;MACN,IAAI,CAACb,WAAW,GAAG,KAAK;;EAEhC;EAEA,MAAMkC,UAAU;IACZ,MAAM3C,MAAM,GAAG,IAAI,CAACC,OAAO;IAC3B,IAAID,MAAM,EAAE;MACRA,MAAM,CAACE,GAAG,CAAC,YAAY,EAAE,IAAI,CAACC,aAAa,CAAC;MAE5C,IAAI,CAACF,OAAO,GAAG,IAAI;MACnB,IAAI,CAACG,UAAU,GAAG,IAAI;MAEtB;MACA,MAAMoB,gBAAgB,GAAqCxB,MAAc,CAACwB,gBAAgB;MAC1F,IAAI;QACA,MAAM,IAAIE,OAAO,CAAO,CAACC,OAAO,EAAEC,MAAM,KAAI;UACxC,MAAMjC,OAAO,GAAG6C,UAAU,CAAC,MAAMb,OAAO,EAAE,EAAE,GAAG,CAAC;UAE/C3B,MAAc,CAACwB,gBAAgB,GAAG,YAAgC;YAC/DK,YAAY,CAAClC,OAAO,CAAC;YACrBgC,OAAO,EAAE;YACT;YACC3B,MAAc,CAAC4C,iBAAiB,GAAG,IAAIC,GAAG,EAAE;YAAC,mCAJXf,IAAe;cAAfA,IAAe;YAAA;YAKlD,OAAON,gBAAgB,CAACO,KAAK,CAAC/B,MAAM,EAAE8B,IAAI,CAAC;UAC/C,CAAC;UAED9B,MAAM,CAAC2C,UAAU,EAAE,CAACG,IAAI,CACpB,MAAK;YACDjB,YAAY,CAAClC,OAAO,CAAC;YACrBgC,OAAO,EAAE;UACb,CAAC,EACAL,KAAU,IAAI;YACXO,YAAY,CAAClC,OAAO,CAAC;YACrB;YACA,IAAI2B,KAAK,EAAEC,OAAO,KAAK,qBAAqB,EAAE;cAC1CI,OAAO,EAAE;aACZ,MAAM;cACHC,MAAM,CAACN,KAAK,CAAC;;UAErB,CAAC,CACJ;QACL,CAAC,CAAC;OACL,CAAC,OAAOA,KAAU,EAAE;QACjB,IAAI,CAACjB,IAAI,CAAC,OAAO,EAAE,IAAI5B,wBAAwB,CAAC6C,KAAK,EAAEC,OAAO,EAAED,KAAK,CAAC,CAAC;OAC1E,SAAS;QACLtB,MAAc,CAACwB,gBAAgB,GAAGA,gBAAgB;;;IAI3D,IAAI,CAACnB,IAAI,CAAC,YAAY,CAAC;EAC3B;EAEA,MAAM0C,eAAe,CAAwBC,WAAc;IACvD,IAAI;MACA,MAAMhD,MAAM,GAAG,IAAI,CAACC,OAAO;MAC3B,IAAI,CAACD,MAAM,EAAE,MAAM,IAAIpB,uBAAuB,EAAE;MAEhD,IAAI;QACA,OAAQ,CAAC,MAAMoB,MAAM,CAAC+C,eAAe,CAACC,WAAW,CAAC,KAAWA,WAAW;OAC3E,CAAC,OAAO1B,KAAU,EAAE;QACjB,MAAM,IAAIrC,0BAA0B,CAACqC,KAAK,EAAEC,OAAO,EAAED,KAAK,CAAC;;KAElE,CAAC,OAAOA,KAAU,EAAE;MACjB,IAAI,CAACjB,IAAI,CAAC,OAAO,EAAEiB,KAAK,CAAC;MACzB,MAAMA,KAAK;;EAEnB;EAEA,MAAM2B,mBAAmB,CAAwBC,YAAiB;IAC9D,IAAI;MACA,MAAMlD,MAAM,GAAG,IAAI,CAACC,OAAO;MAC3B,IAAI,CAACD,MAAM,EAAE,MAAM,IAAIpB,uBAAuB,EAAE;MAEhD,IAAI;QACA,OAAQ,CAAC,MAAMoB,MAAM,CAACiD,mBAAmB,CAACC,YAAY,CAAC,KAAaA,YAAY;OACnF,CAAC,OAAO5B,KAAU,EAAE;QACjB,MAAM,IAAIrC,0BAA0B,CAACqC,KAAK,EAAEC,OAAO,EAAED,KAAK,CAAC;;KAElE,CAAC,OAAOA,KAAU,EAAE;MACjB,IAAI,CAACjB,IAAI,CAAC,OAAO,EAAEiB,KAAK,CAAC;MACzB,MAAMA,KAAK;;EAEnB;EAEA,MAAM6B,WAAW,CAAC5B,OAAmB;IACjC,IAAI;MACA,MAAMvB,MAAM,GAAG,IAAI,CAACC,OAAO;MAC3B,IAAI,CAACD,MAAM,EAAE,MAAM,IAAIpB,uBAAuB,EAAE;MAEhD,IAAI;QACA,MAAM;UAAEwE;QAAS,CAAE,GAAG,MAAMpD,MAAM,CAACqD,IAAI,CAAC9B,OAAO,EAAE,MAAM,CAAC;QACxD,OAAO+B,UAAU,CAACC,IAAI,CAACH,SAAS,CAAC;OACpC,CAAC,OAAO9B,KAAU,EAAE;QACjB,MAAM,IAAItC,sBAAsB,CAACsC,KAAK,EAAEC,OAAO,EAAED,KAAK,CAAC;;KAE9D,CAAC,OAAOA,KAAU,EAAE;MACjB,IAAI,CAACjB,IAAI,CAAC,OAAO,EAAEiB,KAAK,CAAC;MACzB,MAAMA,KAAK;;EAEnB","names":["BaseMessageSignerWalletAdapter","scopePollingDetectionStrategy","WalletAccountError","WalletAdapterNetwork","WalletConfigError","WalletConnectionError","WalletDisconnectedError","WalletDisconnectionError","WalletError","WalletLoadError","WalletNotConnectedError","WalletNotReadyError","WalletPublicKeyError","WalletReadyState","WalletSignMessageError","WalletSignTransactionError","WalletTimeoutError","WalletWindowBlockedError","WalletWindowClosedError","PublicKey","BaseSolletWalletAdapter","constructor","provider","network","Mainnet","timeout","window","document","Unsupported","NotDetected","wallet","_wallet","off","_disconnected","_publicKey","emit","_provider","_network","_timeout","_connecting","_readyState","Loadable","sollet","postMessage","Installed","publicKey","connecting","connected","readyState","connect","SolWalletAdapterClass","default","error","message","handleDisconnect","interval","Promise","resolve","reject","clearTimeout","args","apply","on","catch","reason","count","setInterval","popup","_popup","closed","setTimeout","clearInterval","toBytes","disconnect","_responsePromises","Map","then","signTransaction","transaction","signAllTransactions","transactions","signMessage","signature","sign","Uint8Array","from"],"sourceRoot":"","sources":["../../src/base.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}