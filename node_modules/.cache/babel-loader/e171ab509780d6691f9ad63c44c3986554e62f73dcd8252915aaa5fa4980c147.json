{"ast":null,"code":"import { Message, PublicKey, SIGNATURE_LENGTH_IN_BYTES, Transaction } from \"@solana/web3.js\";\nimport bs58 from \"bs58\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { EventEmitter } from \"eventemitter3\";\nconst DEFAULT_SIGNATURE_BUFFER = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\nexport class StrikeWallet extends EventEmitter {\n  constructor() {\n    super();\n    this.url = 'https://wallet.strikeprotocols.com';\n    this.cleanUp = () => {\n      [...this._timers].forEach(t => this.clearTimer(t));\n      const wallet = this._wallet;\n      if (wallet) {\n        wallet.close();\n      }\n      this._wallet = null;\n      this.emit('disconnected');\n    };\n    this.clearTimer = timer => {\n      this._timers = this._timers.filter(t => t != timer);\n      window.clearInterval(timer);\n    };\n    this.instructionsToSerializableInstructions = instructions => instructions.map(i => {\n      return {\n        'programId': i.programId.toBase58(),\n        'accountMetas': i.keys.map(k => {\n          return {\n            address: k.pubkey.toBase58(),\n            signer: k.isSigner,\n            writable: k.isWritable\n          };\n        }),\n        'data': window.btoa(String.fromCharCode(...i.data))\n      };\n    });\n    this.handleWalletMessage = data => {\n      var _a, _b, _c;\n      if (data.type == \"connected\") {\n        this._connecting = false;\n        if (!data.error) {\n          this.isLoggedIn = true;\n          if ((_a = data.connected) === null || _a === void 0 ? void 0 : _a.publicKey) {\n            this._publicKey = new PublicKey(data.connected.publicKey);\n          }\n        }\n      } else if ([\"sendTransaction\", \"sendFinalTransaction\"].includes(data.type)) {\n        const transactionIdentifier = (_b = data.sendTransaction) === null || _b === void 0 ? void 0 : _b.identifier;\n        if (transactionIdentifier && transactionIdentifier in this._pendingTransactions) {\n          if (data.error) {\n            this._pendingTransactionErrors[transactionIdentifier] = {\n              message: data.error\n            };\n          } else {\n            this._pendingTransactions[transactionIdentifier] = data.sendTransaction || null;\n          }\n        }\n      } else if (data.type == \"signTransaction\") {\n        const transactionIdentifier = (_c = data.signTransaction) === null || _c === void 0 ? void 0 : _c.identifier;\n        if (transactionIdentifier && transactionIdentifier in this._pendingTransactions) {\n          if (data.error) {\n            this._pendingTransactionErrors[transactionIdentifier] = {\n              message: data.error\n            };\n          } else {\n            this._pendingTransactions[transactionIdentifier] = data.signTransaction || null;\n          }\n        }\n      }\n    };\n    this.isLoggedIn = false;\n    this._pendingTransactions = {};\n    this._pendingTransactionErrors = {};\n    this._timers = [];\n    this._wallet = null;\n    this._connecting = false;\n    this._publicKey = null;\n    window.addEventListener(\"message\", e => {\n      this.handleWalletMessage(e.data);\n    });\n  }\n  async connect(url) {\n    try {\n      this.url = url || this.url;\n      const origin = encodeURIComponent(window.location.origin);\n      const connectUrl = `${this.url}/connect?origin=${origin}`;\n      this._connecting = true;\n      this._wallet = window.open(connectUrl, `strike-wallet-${origin}`, \"height=900,width=800,menubar=no,status=no,toolbar=no\");\n      if (!this._wallet) {\n        this._connecting = false;\n        throw new Error(\"Unable to connect to wallet\");\n      }\n      this._timers.push(window.setInterval(() => {\n        if (this._wallet.closed) {\n          this.cleanUp();\n        } else if (this._wallet) {\n          this._wallet.postMessage({\n            type: 'heartbeat'\n          }, this.url);\n        }\n      }, 100));\n      return new Promise((resolve, reject) => {\n        const timer = window.setInterval(() => {\n          if (this.isLoggedIn && this._publicKey) {\n            this.clearTimer(timer);\n            resolve(this._publicKey);\n          } else if (!this.isLoggedIn && !this._connecting) {\n            this.clearTimer(timer);\n            reject(new Error(\"Unable to connect to Strike\"));\n          }\n        }, 100);\n        this._timers.push(timer);\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n  async signTransaction(transaction) {\n    this.verifyCanSignRequests([transaction]);\n    try {\n      return this.signOneTransaction(transaction);\n    } catch (error) {\n      throw error;\n    }\n  }\n  async signAllTransactions(transactions) {\n    this.verifyCanSignRequests(transactions);\n    try {\n      return this.signMultipleTransactions(transactions);\n    } catch (error) {\n      throw error;\n    }\n  }\n  async sendTransaction(transaction, connection, options) {\n    try {\n      const wallet = this._wallet;\n      if (!wallet) throw new Error(\"Not Connected\");\n      const transactionIdentifier = uuidv4();\n      this._pendingTransactions[transactionIdentifier] = null;\n      const signers = options ? options.signers : undefined;\n      if (signers && signers.length > 0) {\n        return new Promise((resolve, reject) => {\n          this.signOneTransaction(transaction, transactionIdentifier).then(walletTransaction => {\n            this._pendingTransactions[transactionIdentifier] = null;\n            (signers === null || signers === void 0 ? void 0 : signers.length) && walletTransaction.partialSign(...signers);\n            wallet.postMessage({\n              type: \"sendFinalTransaction\",\n              sendFinalTransaction: {\n                transactionIdentifier,\n                signaturePubkeyPairs: walletTransaction.signatures.filter(sp => sp.signature != null).map(sp => {\n                  return {\n                    'pubkey': sp.publicKey.toBase58(),\n                    'signature': sp.signature.toString('base64')\n                  };\n                })\n              }\n            }, this.url);\n            const timer = window.setInterval(() => {\n              const pendingTransaction = this._pendingTransactions[transactionIdentifier];\n              const pendingTransactionError = this._pendingTransactionErrors[transactionIdentifier];\n              if (pendingTransaction != null || pendingTransactionError != null) {\n                this.clearTimer(timer);\n                pendingTransaction && resolve(pendingTransaction.signature);\n                pendingTransactionError && reject(pendingTransactionError);\n              }\n            }, 100);\n            this._timers.push(timer);\n          }).catch(error => {\n            reject(error);\n            throw error;\n          });\n        });\n      } else {\n        const instructions = this.instructionsToSerializableInstructions(transaction.instructions);\n        return new Promise((resolve, reject) => {\n          wallet.postMessage({\n            type: \"sendTransaction\",\n            sendTransaction: {\n              instructions,\n              transactionIdentifier\n            }\n          }, this.url);\n          const timer = window.setInterval(() => {\n            const pendingTransaction = this._pendingTransactions[transactionIdentifier];\n            const pendingTransactionError = this._pendingTransactionErrors[transactionIdentifier];\n            if (pendingTransaction != null || pendingTransactionError != null) {\n              this.clearTimer(timer);\n              pendingTransaction && resolve(pendingTransaction.signature);\n              pendingTransactionError && reject(pendingTransactionError);\n            }\n          }, 100);\n          this._timers.push(timer);\n        });\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n  buildTransaction(pendingTransaction) {\n    let message = Message.from(Buffer.from(Uint8Array.from(window.atob(pendingTransaction.message), c => c.charCodeAt(0))));\n    return Transaction.populate(message, Array.from({\n      length: message.header.numRequiredSignatures\n    }, (_v, i) => {\n      let sigPubkeyPair = pendingTransaction.signatures.find(s => s.pubkey == message.accountKeys[i].toBase58());\n      return bs58.encode(sigPubkeyPair ? Buffer.from(Uint8Array.from(window.atob(sigPubkeyPair.signature), c => c.charCodeAt(0))) : DEFAULT_SIGNATURE_BUFFER);\n    }));\n  }\n  verifyCanSignRequests(transactions) {\n    transactions.forEach(transaction => {\n      if (transaction.signatures.some(s => s.signature != null)) {\n        throw new Error(\"Strike does not support this signing mode\");\n      }\n    });\n  }\n  signOneTransaction(transaction) {\n    let transactionIdentifier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : uuidv4();\n    const wallet = this._wallet;\n    if (!wallet) throw new Error(\"Not Connected\");\n    const instructions = this.instructionsToSerializableInstructions(transaction.instructions);\n    this._pendingTransactions[transactionIdentifier] = null;\n    return new Promise((resolve, reject) => {\n      wallet.postMessage({\n        type: \"signTransaction\",\n        signTransaction: {\n          instructions,\n          transactionIdentifier\n        }\n      }, this.url);\n      const timer = window.setInterval(() => {\n        const pendingTransaction = this._pendingTransactions[transactionIdentifier];\n        const pendingTransactionError = this._pendingTransactionErrors[transactionIdentifier];\n        if (pendingTransaction != null || pendingTransactionError != null) {\n          this.clearTimer(timer);\n          pendingTransaction && resolve(this.buildTransaction(pendingTransaction));\n          pendingTransactionError && reject(pendingTransactionError);\n        }\n      }, 100);\n      this._timers.push(timer);\n    });\n  }\n  signMultipleTransactions(transactions) {\n    const wallet = this._wallet;\n    if (!wallet) throw new Error(\"Not Connected\");\n    const serializedTransactions = transactions.map(t => {\n      return {\n        instructions: this.instructionsToSerializableInstructions(t.instructions),\n        transactionIdentifier: uuidv4()\n      };\n    });\n    const transactionIdentifiers = serializedTransactions.map(t => t.transactionIdentifier);\n    transactionIdentifiers.forEach(transactionIdentifier => this._pendingTransactions[transactionIdentifier] = null);\n    return new Promise((resolve, reject) => {\n      wallet.postMessage({\n        type: \"signAllTransactions\",\n        signAllTransactions: {\n          transactions: serializedTransactions\n        }\n      }, this.url);\n      const timer = window.setInterval(() => {\n        const pendingTransactions = transactionIdentifiers.map(txId => this._pendingTransactions[txId]);\n        const pendingTransactionErrors = transactionIdentifiers.map(txId => this._pendingTransactionErrors[txId]);\n        if (pendingTransactions.every(t => t != null)) {\n          this.clearTimer(timer);\n          resolve(pendingTransactions.map(pt => this.buildTransaction(pt)));\n        } else if (pendingTransactionErrors.some(e => e != null)) {\n          this.clearTimer(timer);\n          reject(pendingTransactionErrors.find(e => e != null));\n        }\n      }, 100);\n      this._timers.push(timer);\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["Message","PublicKey","SIGNATURE_LENGTH_IN_BYTES","Transaction","bs58","v4","uuidv4","EventEmitter","DEFAULT_SIGNATURE_BUFFER","Buffer","alloc","fill","StrikeWallet","constructor","_timers","forEach","t","clearTimer","wallet","_wallet","close","emit","timer","filter","window","clearInterval","instructions","map","i","programId","toBase58","keys","k","address","pubkey","signer","isSigner","writable","isWritable","btoa","String","fromCharCode","data","type","_connecting","error","isLoggedIn","connected","publicKey","_publicKey","includes","transactionIdentifier","sendTransaction","identifier","_pendingTransactions","_pendingTransactionErrors","message","signTransaction","addEventListener","e","handleWalletMessage","connect","url","origin","encodeURIComponent","location","connectUrl","open","Error","push","setInterval","closed","cleanUp","postMessage","Promise","resolve","reject","transaction","verifyCanSignRequests","signOneTransaction","signAllTransactions","transactions","signMultipleTransactions","connection","options","signers","undefined","length","then","walletTransaction","partialSign","sendFinalTransaction","signaturePubkeyPairs","signatures","sp","signature","toString","pendingTransaction","pendingTransactionError","catch","instructionsToSerializableInstructions","buildTransaction","from","Uint8Array","atob","c","charCodeAt","populate","Array","header","numRequiredSignatures","_v","sigPubkeyPair","find","s","accountKeys","encode","some","serializedTransactions","transactionIdentifiers","pendingTransactions","txId","pendingTransactionErrors","every","pt"],"sourceRoot":"","sources":["../../src/strikewallet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}