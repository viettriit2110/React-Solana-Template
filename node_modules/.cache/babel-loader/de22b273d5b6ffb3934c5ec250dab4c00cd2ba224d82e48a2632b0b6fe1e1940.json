{"ast":null,"code":"import { isWalletAdapterCompatibleWallet, StandardWalletAdapter } from '@solana/wallet-standard-wallet-adapter-base';\nimport { DEPRECATED_getWallets } from '@wallet-standard/app';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nexport function useStandardWalletAdapters(adapters) {\n  const {\n    get,\n    on\n  } = useConstant(() => DEPRECATED_getWallets());\n  const [standardAdapters, setStandardAdapters] = useState(() => wrapWalletsWithAdapters(get()));\n  const warnings = useConstant(() => new Set());\n  useEffect(() => {\n    const listeners = [on('register', function () {\n      for (var _len = arguments.length, wallets = new Array(_len), _key = 0; _key < _len; _key++) {\n        wallets[_key] = arguments[_key];\n      }\n      return setStandardAdapters(standardAdapters => [...standardAdapters, ...wrapWalletsWithAdapters(wallets)]);\n    }), on('unregister', function () {\n      for (var _len2 = arguments.length, wallets = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        wallets[_key2] = arguments[_key2];\n      }\n      return setStandardAdapters(standardAdapters => standardAdapters.filter(standardAdapter => wallets.some(wallet => wallet === standardAdapter.wallet)));\n    })];\n    return () => listeners.forEach(destroy => destroy());\n  }, [on]);\n  return useMemo(() => [...standardAdapters, ...adapters.filter(_ref => {\n    let {\n      name\n    } = _ref;\n    if (standardAdapters.some(standardAdapter => standardAdapter.name === name)) {\n      if (!warnings.has(name)) {\n        warnings.add(name);\n        console.warn(`${name} was registered as a Standard Wallet. The Wallet Adapter for ${name} can be removed from your app.`);\n      }\n      return false;\n    }\n    return true;\n  })], [standardAdapters, adapters, warnings]);\n}\nfunction useConstant(fn) {\n  const ref = useRef();\n  if (!ref.current) {\n    ref.current = {\n      value: fn()\n    };\n  }\n  return ref.current.value;\n}\nfunction wrapWalletsWithAdapters(wallets) {\n  return wallets.filter(isWalletAdapterCompatibleWallet).map(wallet => new StandardWalletAdapter({\n    wallet\n  }));\n}","map":{"version":3,"mappings":"AACA,SAASA,+BAA+B,EAAEC,qBAAqB,QAAQ,6CAA6C;AACpH,SAASC,qBAAqB,QAAQ,sBAAsB;AAE5D,SAASC,SAAS,EAAEC,OAAO,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAE5D,OAAM,SAAUC,yBAAyB,CAACC,QAAmB;EACzD,MAAM;IAAEC,GAAG;IAAEC;EAAE,CAAE,GAAGC,WAAW,CAAC,MAAMT,qBAAqB,EAAE,CAAC;EAC9D,MAAM,CAACU,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGP,QAAQ,CAAC,MAAMQ,uBAAuB,CAACL,GAAG,EAAE,CAAC,CAAC;EAC9F,MAAMM,QAAQ,GAAGJ,WAAW,CAAC,MAAM,IAAIK,GAAG,EAAc,CAAC;EAEzDb,SAAS,CAAC,MAAK;IACX,MAAMc,SAAS,GAAG,CACdP,EAAE,CAAC,UAAU,EAAE;MAAA,kCAAIQ,OAAO;QAAPA,OAAO;MAAA;MAAA,OACtBL,mBAAmB,CAAED,gBAAgB,IAAK,CAAC,GAAGA,gBAAgB,EAAE,GAAGE,uBAAuB,CAACI,OAAO,CAAC,CAAC,CAAC;IAAA,EACxG,EACDR,EAAE,CAAC,YAAY,EAAE;MAAA,mCAAIQ,OAAO;QAAPA,OAAO;MAAA;MAAA,OACxBL,mBAAmB,CAAED,gBAAgB,IACjCA,gBAAgB,CAACO,MAAM,CAAEC,eAAe,IACpCF,OAAO,CAACG,IAAI,CAAEC,MAAM,IAAKA,MAAM,KAAKF,eAAe,CAACE,MAAM,CAAC,CAC9D,CACJ;IAAA,EACJ,CACJ;IACD,OAAO,MAAML,SAAS,CAACM,OAAO,CAAEC,OAAO,IAAKA,OAAO,EAAE,CAAC;EAC1D,CAAC,EAAE,CAACd,EAAE,CAAC,CAAC;EAER,OAAON,OAAO,CACV,MAAM,CACF,GAAGQ,gBAAgB,EACnB,GAAGJ,QAAQ,CAACW,MAAM,CAAC,QAAa;IAAA,IAAZ;MAAEM;IAAI,CAAE;IACxB,IAAIb,gBAAgB,CAACS,IAAI,CAAED,eAAe,IAAKA,eAAe,CAACK,IAAI,KAAKA,IAAI,CAAC,EAAE;MAC3E,IAAI,CAACV,QAAQ,CAACW,GAAG,CAACD,IAAI,CAAC,EAAE;QACrBV,QAAQ,CAACY,GAAG,CAACF,IAAI,CAAC;QAClBG,OAAO,CAACC,IAAI,CACR,GAAGJ,IAAI,gEAAgEA,IAAI,gCAAgC,CAC9G;;MAEL,OAAO,KAAK;;IAEhB,OAAO,IAAI;EACf,CAAC,CAAC,CACL,EACD,CAACb,gBAAgB,EAAEJ,QAAQ,EAAEO,QAAQ,CAAC,CACzC;AACL;AAEA,SAASJ,WAAW,CAAImB,EAAW;EAC/B,MAAMC,GAAG,GAAG1B,MAAM,EAAgB;EAClC,IAAI,CAAC0B,GAAG,CAACC,OAAO,EAAE;IACdD,GAAG,CAACC,OAAO,GAAG;MAAEC,KAAK,EAAEH,EAAE;IAAE,CAAE;;EAEjC,OAAOC,GAAG,CAACC,OAAO,CAACC,KAAK;AAC5B;AAEA,SAASnB,uBAAuB,CAACI,OAA8B;EAC3D,OAAOA,OAAO,CAACC,MAAM,CAACnB,+BAA+B,CAAC,CAACkC,GAAG,CAAEZ,MAAM,IAAK,IAAIrB,qBAAqB,CAAC;IAAEqB;EAAM,CAAE,CAAC,CAAC;AACjH","names":["isWalletAdapterCompatibleWallet","StandardWalletAdapter","DEPRECATED_getWallets","useEffect","useMemo","useRef","useState","useStandardWalletAdapters","adapters","get","on","useConstant","standardAdapters","setStandardAdapters","wrapWalletsWithAdapters","warnings","Set","listeners","wallets","filter","standardAdapter","some","wallet","forEach","destroy","name","has","add","console","warn","fn","ref","current","value","map"],"sourceRoot":"","sources":["../../src/useStandardWalletAdapters.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}