{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _StandardWalletAdapter_instances, _StandardWalletAdapter_account, _StandardWalletAdapter_publicKey, _StandardWalletAdapter_connecting, _StandardWalletAdapter_off, _StandardWalletAdapter_wallet, _StandardWalletAdapter_supportedTransactionVersions, _StandardWalletAdapter_readyState, _StandardWalletAdapter_connected, _StandardWalletAdapter_disconnected, _StandardWalletAdapter_changed, _StandardWalletAdapter_signTransaction, _StandardWalletAdapter_signAllTransactions, _StandardWalletAdapter_signMessage;\nimport { BaseWalletAdapter, WalletAccountError, WalletConfigError, WalletConnectionError, WalletDisconnectedError, WalletDisconnectionError, WalletError, WalletNotConnectedError, WalletNotReadyError, WalletPublicKeyError, WalletReadyState, WalletSendTransactionError, WalletSignMessageError, WalletSignTransactionError } from '@solana/wallet-adapter-base';\nimport { getChainForEndpoint, getCommitment } from '@solana/wallet-standard-util';\nimport { PublicKey, Transaction, VersionedTransaction } from '@solana/web3.js';\nimport { arraysEqual } from '@wallet-standard/wallet';\nimport bs58 from 'bs58';\nimport { isVersionedTransaction } from './transaction.js';\n/** TODO: docs */\nexport function isWalletAdapterCompatibleWallet(wallet) {\n  return 'standard:connect' in wallet.features && 'standard:events' in wallet.features && ('solana:signAndSendTransaction' in wallet.features || 'solana:signTransaction' in wallet.features);\n}\n/** TODO: docs */\nexport class StandardWalletAdapter extends BaseWalletAdapter {\n  constructor(_ref) {\n    let {\n      wallet\n    } = _ref;\n    super();\n    _StandardWalletAdapter_instances.add(this);\n    _StandardWalletAdapter_account.set(this, void 0);\n    _StandardWalletAdapter_publicKey.set(this, void 0);\n    _StandardWalletAdapter_connecting.set(this, void 0);\n    _StandardWalletAdapter_off.set(this, void 0);\n    _StandardWalletAdapter_wallet.set(this, void 0);\n    _StandardWalletAdapter_supportedTransactionVersions.set(this, void 0);\n    _StandardWalletAdapter_readyState.set(this, typeof window === 'undefined' || typeof document === 'undefined' ? WalletReadyState.Unsupported : WalletReadyState.Installed);\n    _StandardWalletAdapter_changed.set(this, properties => {\n      // If the adapter isn't connected or the change doesn't include accounts, do nothing.\n      if (!__classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\") || !__classPrivateFieldGet(this, _StandardWalletAdapter_publicKey, \"f\") || !('accounts' in properties)) return;\n      const account = __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").accounts[0];\n      // If there's no connected account, disconnect the adapter.\n      if (!account) {\n        __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_disconnected).call(this);\n        this.emit('error', new WalletDisconnectedError());\n        this.emit('disconnect');\n        return;\n      }\n      // If the account hasn't actually changed, do nothing.\n      if (account === __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\")) return;\n      let publicKey;\n      // If the account public key isn't valid, disconnect the adapter.\n      try {\n        publicKey = new PublicKey(account.publicKey);\n      } catch (error) {\n        __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_disconnected).call(this);\n        this.emit('error', new WalletPublicKeyError(error?.message));\n        this.emit('disconnect');\n        return;\n      }\n      // Change the adapter's account and public key and emit an event.\n      __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_connected).call(this, account, publicKey);\n      this.emit('connect', publicKey);\n    });\n    __classPrivateFieldSet(this, _StandardWalletAdapter_wallet, wallet, \"f\");\n    const supportedTransactionVersions = 'solana:signAndSendTransaction' in wallet.features ? wallet.features['solana:signAndSendTransaction'].supportedTransactionVersions : wallet.features['solana:signTransaction'].supportedTransactionVersions;\n    __classPrivateFieldSet(this, _StandardWalletAdapter_supportedTransactionVersions, arraysEqual(supportedTransactionVersions, ['legacy']) ? null : new Set(supportedTransactionVersions), \"f\");\n    __classPrivateFieldSet(this, _StandardWalletAdapter_account, null, \"f\");\n    __classPrivateFieldSet(this, _StandardWalletAdapter_publicKey, null, \"f\");\n    __classPrivateFieldSet(this, _StandardWalletAdapter_connecting, false, \"f\");\n  }\n  get supportedTransactionVersions() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_supportedTransactionVersions, \"f\");\n  }\n  get name() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").name;\n  }\n  get icon() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").icon;\n  }\n  get url() {\n    return 'https://github.com/wallet-standard';\n  }\n  get publicKey() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_publicKey, \"f\");\n  }\n  get connecting() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_connecting, \"f\");\n  }\n  get readyState() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_readyState, \"f\");\n  }\n  get wallet() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\");\n  }\n  get standard() {\n    return true;\n  }\n  async connect() {\n    try {\n      if (this.connected || this.connecting) return;\n      if (__classPrivateFieldGet(this, _StandardWalletAdapter_readyState, \"f\") !== WalletReadyState.Installed) throw new WalletNotReadyError();\n      __classPrivateFieldSet(this, _StandardWalletAdapter_connecting, true, \"f\");\n      if (!__classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").accounts.length) {\n        try {\n          await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['standard:connect'].connect();\n        } catch (error) {\n          throw new WalletConnectionError(error?.message, error);\n        }\n      }\n      if (!__classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").accounts.length) throw new WalletAccountError();\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const account = __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").accounts[0];\n      let publicKey;\n      try {\n        publicKey = new PublicKey(account.publicKey);\n      } catch (error) {\n        throw new WalletPublicKeyError(error?.message, error);\n      }\n      __classPrivateFieldSet(this, _StandardWalletAdapter_off, __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['standard:events'].on('change', __classPrivateFieldGet(this, _StandardWalletAdapter_changed, \"f\")), \"f\");\n      __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_connected).call(this, account, publicKey);\n      this.emit('connect', publicKey);\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    } finally {\n      __classPrivateFieldSet(this, _StandardWalletAdapter_connecting, false, \"f\");\n    }\n  }\n  async disconnect() {\n    if ('standard:disconnect' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features) {\n      try {\n        await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['standard:disconnect'].disconnect();\n      } catch (error) {\n        this.emit('error', new WalletDisconnectionError(error?.message, error));\n      }\n    }\n    __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_disconnected).call(this);\n    this.emit('disconnect');\n  }\n  async sendTransaction(transaction, connection) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    try {\n      const account = __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\");\n      if (!account) throw new WalletNotConnectedError();\n      let feature;\n      if ('solana:signAndSendTransaction' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features) {\n        if (account.features.includes('solana:signAndSendTransaction')) {\n          feature = 'solana:signAndSendTransaction';\n        } else if ('solana:signTransaction' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features && account.features.includes('solana:signTransaction')) {\n          feature = 'solana:signTransaction';\n        } else {\n          throw new WalletAccountError();\n        }\n      } else if ('solana:signTransaction' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features) {\n        if (!account.features.includes('solana:signTransaction')) throw new WalletAccountError();\n        feature = 'solana:signTransaction';\n      } else {\n        throw new WalletConfigError();\n      }\n      const chain = getChainForEndpoint(connection.rpcEndpoint);\n      if (!account.chains.includes(chain)) throw new WalletSendTransactionError();\n      try {\n        const {\n          signers,\n          ...sendOptions\n        } = options;\n        let serializedTransaction;\n        if (isVersionedTransaction(transaction)) {\n          signers?.length && transaction.sign(signers);\n          serializedTransaction = transaction.serialize();\n        } else {\n          transaction = await this.prepareTransaction(transaction, connection, sendOptions);\n          signers?.length && transaction.partialSign(...signers);\n          serializedTransaction = new Uint8Array(transaction.serialize({\n            requireAllSignatures: false,\n            verifySignatures: false\n          }));\n        }\n        if (feature === 'solana:signAndSendTransaction') {\n          const [output] = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['solana:signAndSendTransaction'].signAndSendTransaction({\n            account,\n            chain,\n            transaction: serializedTransaction,\n            options: {\n              preflightCommitment: getCommitment(sendOptions.preflightCommitment || connection.commitment),\n              skipPreflight: sendOptions.skipPreflight,\n              maxRetries: sendOptions.maxRetries,\n              minContextSlot: sendOptions.minContextSlot\n            }\n          });\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          return bs58.encode(output.signature);\n        } else {\n          const [output] = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['solana:signTransaction'].signTransaction({\n            account,\n            chain,\n            transaction: serializedTransaction,\n            options: {\n              preflightCommitment: getCommitment(sendOptions.preflightCommitment || connection.commitment),\n              minContextSlot: sendOptions.minContextSlot\n            }\n          });\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          return await connection.sendRawTransaction(output.signedTransaction, {\n            ...sendOptions,\n            preflightCommitment: getCommitment(sendOptions.preflightCommitment || connection.commitment)\n          });\n        }\n      } catch (error) {\n        if (error instanceof WalletError) throw error;\n        throw new WalletSendTransactionError(error?.message, error);\n      }\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n}\n_StandardWalletAdapter_account = new WeakMap(), _StandardWalletAdapter_publicKey = new WeakMap(), _StandardWalletAdapter_connecting = new WeakMap(), _StandardWalletAdapter_off = new WeakMap(), _StandardWalletAdapter_wallet = new WeakMap(), _StandardWalletAdapter_supportedTransactionVersions = new WeakMap(), _StandardWalletAdapter_readyState = new WeakMap(), _StandardWalletAdapter_changed = new WeakMap(), _StandardWalletAdapter_instances = new WeakSet(), _StandardWalletAdapter_connected = function _StandardWalletAdapter_connected(account, publicKey) {\n  __classPrivateFieldSet(this, _StandardWalletAdapter_account, account, \"f\");\n  __classPrivateFieldSet(this, _StandardWalletAdapter_publicKey, publicKey, \"f\");\n  if (account?.features.includes('solana:signTransaction')) {\n    this.signTransaction = __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_signTransaction);\n    this.signAllTransactions = __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_signAllTransactions);\n  } else {\n    delete this.signTransaction;\n    delete this.signAllTransactions;\n  }\n  if (account?.features.includes('solana:signMessage')) {\n    this.signMessage = __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_signMessage);\n  } else {\n    delete this.signMessage;\n  }\n}, _StandardWalletAdapter_disconnected = function _StandardWalletAdapter_disconnected() {\n  const off = __classPrivateFieldGet(this, _StandardWalletAdapter_off, \"f\");\n  if (off) {\n    __classPrivateFieldSet(this, _StandardWalletAdapter_off, undefined, \"f\");\n    off();\n  }\n  __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_connected).call(this, null, null);\n}, _StandardWalletAdapter_signTransaction = async function _StandardWalletAdapter_signTransaction(transaction) {\n  try {\n    const account = __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\");\n    if (!account) throw new WalletNotConnectedError();\n    if (!('solana:signTransaction' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features)) throw new WalletConfigError();\n    if (!account.features.includes('solana:signTransaction')) throw new WalletAccountError();\n    try {\n      const signedTransactions = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['solana:signTransaction'].signTransaction({\n        account,\n        transaction: isVersionedTransaction(transaction) ? transaction.serialize() : new Uint8Array(transaction.serialize({\n          requireAllSignatures: false,\n          verifySignatures: false\n        }))\n      });\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const serializedTransaction = signedTransactions[0].signedTransaction;\n      return isVersionedTransaction(transaction) ? VersionedTransaction.deserialize(serializedTransaction) : Transaction.from(serializedTransaction);\n    } catch (error) {\n      if (error instanceof WalletError) throw error;\n      throw new WalletSignTransactionError(error?.message, error);\n    }\n  } catch (error) {\n    this.emit('error', error);\n    throw error;\n  }\n}, _StandardWalletAdapter_signAllTransactions = async function _StandardWalletAdapter_signAllTransactions(transactions) {\n  try {\n    const account = __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\");\n    if (!account) throw new WalletNotConnectedError();\n    if (!('solana:signTransaction' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features)) throw new WalletConfigError();\n    if (!account.features.includes('solana:signTransaction')) throw new WalletSignTransactionError();\n    try {\n      const signedTransactions = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['solana:signTransaction'].signTransaction(...transactions.map(transaction => ({\n        account,\n        transaction: isVersionedTransaction(transaction) ? transaction.serialize() : new Uint8Array(transaction.serialize({\n          requireAllSignatures: false,\n          verifySignatures: false\n        }))\n      })));\n      return transactions.map((transaction, index) => {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const signedTransaction = signedTransactions[index].signedTransaction;\n        return isVersionedTransaction(transaction) ? VersionedTransaction.deserialize(signedTransaction) : Transaction.from(signedTransaction);\n      });\n    } catch (error) {\n      throw new WalletSignTransactionError(error?.message, error);\n    }\n  } catch (error) {\n    this.emit('error', error);\n    throw error;\n  }\n}, _StandardWalletAdapter_signMessage = async function _StandardWalletAdapter_signMessage(message) {\n  try {\n    const account = __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\");\n    if (!account) throw new WalletNotConnectedError();\n    if (!('solana:signMessage' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features)) throw new WalletConfigError();\n    if (!account.features.includes('solana:signMessage')) throw new WalletSignMessageError();\n    try {\n      const signedMessages = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['solana:signMessage'].signMessage({\n        account,\n        message\n      });\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      return signedMessages[0].signature;\n    } catch (error) {\n      throw new WalletSignMessageError(error?.message, error);\n    }\n  } catch (error) {\n    this.emit('error', error);\n    throw error;\n  }\n};","map":{"version":3,"mappings":"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","names":["BaseWalletAdapter","WalletAccountError","WalletConfigError","WalletConnectionError","WalletDisconnectedError","WalletDisconnectionError","WalletError","WalletNotConnectedError","WalletNotReadyError","WalletPublicKeyError","WalletReadyState","WalletSendTransactionError","WalletSignMessageError","WalletSignTransactionError","getChainForEndpoint","getCommitment","PublicKey","Transaction","VersionedTransaction","arraysEqual","bs58","isVersionedTransaction","isWalletAdapterCompatibleWallet","wallet","features","StandardWalletAdapter","constructor","_StandardWalletAdapter_account","_StandardWalletAdapter_publicKey","_StandardWalletAdapter_connecting","_StandardWalletAdapter_off","_StandardWalletAdapter_wallet","_StandardWalletAdapter_supportedTransactionVersions","_StandardWalletAdapter_readyState","window","document","Unsupported","Installed","_StandardWalletAdapter_changed","properties","__classPrivateFieldGet","account","accounts","emit","publicKey","error","message","__classPrivateFieldSet","supportedTransactionVersions","Set","name","icon","url","connecting","readyState","standard","connect","connected","length","on","disconnect","sendTransaction","transaction","connection","options","feature","includes","chain","rpcEndpoint","chains","signers","sendOptions","serializedTransaction","sign","serialize","prepareTransaction","partialSign","Uint8Array","requireAllSignatures","verifySignatures","output","signAndSendTransaction","preflightCommitment","commitment","skipPreflight","maxRetries","minContextSlot","encode","signature","signTransaction","sendRawTransaction","signedTransaction","signAllTransactions","signMessage","off","undefined","_StandardWalletAdapter_signTransaction","signedTransactions","deserialize","from","_StandardWalletAdapter_signAllTransactions","transactions","map","index","_StandardWalletAdapter_signMessage","signedMessages"],"sourceRoot":"","sources":["../../src/adapter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}