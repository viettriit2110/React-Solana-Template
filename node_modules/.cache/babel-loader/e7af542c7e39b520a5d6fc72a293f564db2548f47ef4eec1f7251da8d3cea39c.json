{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _SolanaWalletAdapterWalletAccount_adapter, _SolanaWalletAdapterWallet_instances, _SolanaWalletAdapterWallet_listeners, _SolanaWalletAdapterWallet_adapter, _SolanaWalletAdapterWallet_supportedTransactionVersions, _SolanaWalletAdapterWallet_chain, _SolanaWalletAdapterWallet_endpoint, _SolanaWalletAdapterWallet_account, _SolanaWalletAdapterWallet_connected, _SolanaWalletAdapterWallet_disconnected, _SolanaWalletAdapterWallet_connect, _SolanaWalletAdapterWallet_disconnect, _SolanaWalletAdapterWallet_on, _SolanaWalletAdapterWallet_emit, _SolanaWalletAdapterWallet_off, _SolanaWalletAdapterWallet_deserializeTransaction, _SolanaWalletAdapterWallet_signAndSendTransaction, _SolanaWalletAdapterWallet_signTransaction, _SolanaWalletAdapterWallet_signMessage;\nimport { WalletReadyState } from '@solana/wallet-adapter-base';\nimport { isSolanaChain } from '@solana/wallet-standard-chains';\nimport { getEndpointForChain } from '@solana/wallet-standard-util';\nimport { Connection, Transaction, VersionedTransaction } from '@solana/web3.js';\nimport { getWallets } from '@wallet-standard/app';\nimport { arraysEqual, bytesEqual, ReadonlyWalletAccount } from '@wallet-standard/wallet';\nimport bs58 from 'bs58';\nimport { isVersionedTransaction } from './transaction.js';\n/** TODO: docs */\nexport class SolanaWalletAdapterWalletAccount extends ReadonlyWalletAccount {\n  constructor(_ref) {\n    let {\n      adapter,\n      address,\n      publicKey,\n      chains\n    } = _ref;\n    const features = ['solana:signAndSendTransaction'];\n    if ('signTransaction' in adapter) {\n      features.push('solana:signTransaction');\n    }\n    if ('signMessage' in adapter) {\n      features.push('solana:signMessage');\n    }\n    super({\n      address,\n      publicKey,\n      chains,\n      features\n    });\n    _SolanaWalletAdapterWalletAccount_adapter.set(this, void 0);\n    if (new.target === SolanaWalletAdapterWalletAccount) {\n      Object.freeze(this);\n    }\n    __classPrivateFieldSet(this, _SolanaWalletAdapterWalletAccount_adapter, adapter, \"f\");\n  }\n}\n_SolanaWalletAdapterWalletAccount_adapter = new WeakMap();\n/** TODO: docs */\nexport class SolanaWalletAdapterWallet {\n  constructor(adapter, chain, endpoint) {\n    var _this = this;\n    _SolanaWalletAdapterWallet_instances.add(this);\n    _SolanaWalletAdapterWallet_listeners.set(this, {});\n    _SolanaWalletAdapterWallet_adapter.set(this, void 0);\n    _SolanaWalletAdapterWallet_supportedTransactionVersions.set(this, void 0);\n    _SolanaWalletAdapterWallet_chain.set(this, void 0);\n    _SolanaWalletAdapterWallet_endpoint.set(this, void 0);\n    _SolanaWalletAdapterWallet_account.set(this, void 0);\n    _SolanaWalletAdapterWallet_connect.set(this, async function () {\n      let {\n        silent\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (!silent && !__classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_adapter, \"f\").connected) {\n        await __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_adapter, \"f\").connect();\n      }\n      __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_connected).call(_this);\n      return {\n        accounts: _this.accounts\n      };\n    });\n    _SolanaWalletAdapterWallet_disconnect.set(this, async () => {\n      await __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").disconnect();\n    });\n    _SolanaWalletAdapterWallet_on.set(this, (event, listener) => {\n      __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_listeners, \"f\")[event]?.push(listener) || (__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_listeners, \"f\")[event] = [listener]);\n      return () => __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_off).call(this, event, listener);\n    });\n    _SolanaWalletAdapterWallet_signAndSendTransaction.set(this, async function () {\n      const outputs = [];\n      for (var _len = arguments.length, inputs = new Array(_len), _key = 0; _key < _len; _key++) {\n        inputs[_key] = arguments[_key];\n      }\n      if (inputs.length === 1) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const input = inputs[0];\n        if (input.account !== __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_account, \"f\")) throw new Error('invalid account');\n        if (!isSolanaChain(input.chain)) throw new Error('invalid chain');\n        const transaction = __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_deserializeTransaction).call(_this, input.transaction);\n        const {\n          commitment,\n          preflightCommitment,\n          skipPreflight,\n          maxRetries,\n          minContextSlot\n        } = input.options || {};\n        const endpoint = getEndpointForChain(input.chain, __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_endpoint, \"f\"));\n        const connection = new Connection(endpoint, commitment || 'confirmed');\n        const latestBlockhash = commitment ? await connection.getLatestBlockhash({\n          commitment: preflightCommitment || commitment,\n          minContextSlot\n        }) : undefined;\n        const signature = await __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_adapter, \"f\").sendTransaction(transaction, connection, {\n          preflightCommitment,\n          skipPreflight,\n          maxRetries,\n          minContextSlot\n        });\n        if (latestBlockhash) {\n          await connection.confirmTransaction({\n            ...latestBlockhash,\n            signature\n          }, commitment || 'confirmed');\n        }\n        outputs.push({\n          signature: bs58.decode(signature)\n        });\n      } else if (inputs.length > 1) {\n        // Adapters have no `sendAllTransactions` method, so just sign and send each transaction in serial.\n        for (const input of inputs) {\n          outputs.push(...(await __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_signAndSendTransaction, \"f\").call(_this, input)));\n        }\n      }\n      return outputs;\n    });\n    _SolanaWalletAdapterWallet_signTransaction.set(this, async function () {\n      if (!('signTransaction' in __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_adapter, \"f\"))) throw new Error('signTransaction not implemented by adapter');\n      const outputs = [];\n      for (var _len2 = arguments.length, inputs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        inputs[_key2] = arguments[_key2];\n      }\n      if (inputs.length === 1) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const input = inputs[0];\n        if (input.account !== __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_account, \"f\")) throw new Error('invalid account');\n        if (input.chain && !isSolanaChain(input.chain)) throw new Error('invalid chain');\n        const transaction = __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_deserializeTransaction).call(_this, input.transaction);\n        const signedTransaction = await __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_adapter, \"f\").signTransaction(transaction);\n        const serializedTransaction = isVersionedTransaction(signedTransaction) ? signedTransaction.serialize() : new Uint8Array(signedTransaction.serialize({\n          requireAllSignatures: false,\n          verifySignatures: false\n        }));\n        outputs.push({\n          signedTransaction: serializedTransaction\n        });\n      } else if (inputs.length > 1) {\n        for (const input of inputs) {\n          if (input.account !== __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_account, \"f\")) throw new Error('invalid account');\n          if (input.chain && !isSolanaChain(input.chain)) throw new Error('invalid chain');\n        }\n        const transactions = inputs.map(_ref2 => {\n          let {\n            transaction\n          } = _ref2;\n          return __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_deserializeTransaction).call(_this, transaction);\n        });\n        const signedTransactions = await __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_adapter, \"f\").signAllTransactions(transactions);\n        outputs.push(...signedTransactions.map(signedTransaction => {\n          const serializedTransaction = isVersionedTransaction(signedTransaction) ? signedTransaction.serialize() : new Uint8Array(signedTransaction.serialize({\n            requireAllSignatures: false,\n            verifySignatures: false\n          }));\n          return {\n            signedTransaction: serializedTransaction\n          };\n        }));\n      }\n      return outputs;\n    });\n    _SolanaWalletAdapterWallet_signMessage.set(this, async function () {\n      if (!('signMessage' in __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_adapter, \"f\"))) throw new Error('signMessage not implemented by adapter');\n      const outputs = [];\n      for (var _len3 = arguments.length, inputs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        inputs[_key3] = arguments[_key3];\n      }\n      if (inputs.length === 1) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const input = inputs[0];\n        if (input.account !== __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_account, \"f\")) throw new Error('invalid account');\n        const signature = await __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_adapter, \"f\").signMessage(input.message);\n        outputs.push({\n          signedMessage: input.message,\n          signature\n        });\n      } else if (inputs.length > 1) {\n        // Adapters have no `signAllMessages` method, so just sign each message in serial.\n        for (const input of inputs) {\n          outputs.push(...(await __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_signMessage, \"f\").call(_this, input)));\n        }\n      }\n      return outputs;\n    });\n    if (new.target === SolanaWalletAdapterWallet) {\n      Object.freeze(this);\n    }\n    const supportedTransactionVersions = [...(adapter.supportedTransactionVersions || ['legacy'])];\n    if (!supportedTransactionVersions.length) {\n      supportedTransactionVersions.push('legacy');\n    }\n    __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_adapter, adapter, \"f\");\n    __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, supportedTransactionVersions, \"f\");\n    __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_chain, chain, \"f\");\n    __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_endpoint, endpoint, \"f\");\n    adapter.on('connect', __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_connected), this);\n    adapter.on('disconnect', __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_disconnected), this);\n    __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_connected).call(this);\n  }\n  get version() {\n    return '1.0.0';\n  }\n  get name() {\n    return __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").name;\n  }\n  get icon() {\n    return __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").icon;\n  }\n  get chains() {\n    return [__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_chain, \"f\")];\n  }\n  get features() {\n    const features = {\n      'standard:connect': {\n        version: '1.0.0',\n        connect: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_connect, \"f\")\n      },\n      'standard:disconnect': {\n        version: '1.0.0',\n        disconnect: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_disconnect, \"f\")\n      },\n      'standard:events': {\n        version: '1.0.0',\n        on: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_on, \"f\")\n      },\n      'solana:signAndSendTransaction': {\n        version: '1.0.0',\n        supportedTransactionVersions: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, \"f\"),\n        signAndSendTransaction: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_signAndSendTransaction, \"f\")\n      }\n    };\n    let signTransactionFeature;\n    if ('signTransaction' in __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\")) {\n      signTransactionFeature = {\n        'solana:signTransaction': {\n          version: '1.0.0',\n          supportedTransactionVersions: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, \"f\"),\n          signTransaction: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_signTransaction, \"f\")\n        }\n      };\n    }\n    let signMessageFeature;\n    if ('signMessage' in __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\")) {\n      signMessageFeature = {\n        'solana:signMessage': {\n          version: '1.0.0',\n          signMessage: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_signMessage, \"f\")\n        }\n      };\n    }\n    return {\n      ...features,\n      ...signTransactionFeature,\n      ...signMessageFeature\n    };\n  }\n  get accounts() {\n    return __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\") ? [__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\")] : [];\n  }\n  get endpoint() {\n    return __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_endpoint, \"f\");\n  }\n  destroy() {\n    __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").off('connect', __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_connected), this);\n    __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").off('disconnect', __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_disconnected), this);\n  }\n}\n_SolanaWalletAdapterWallet_listeners = new WeakMap(), _SolanaWalletAdapterWallet_adapter = new WeakMap(), _SolanaWalletAdapterWallet_supportedTransactionVersions = new WeakMap(), _SolanaWalletAdapterWallet_chain = new WeakMap(), _SolanaWalletAdapterWallet_endpoint = new WeakMap(), _SolanaWalletAdapterWallet_account = new WeakMap(), _SolanaWalletAdapterWallet_connect = new WeakMap(), _SolanaWalletAdapterWallet_disconnect = new WeakMap(), _SolanaWalletAdapterWallet_on = new WeakMap(), _SolanaWalletAdapterWallet_signAndSendTransaction = new WeakMap(), _SolanaWalletAdapterWallet_signTransaction = new WeakMap(), _SolanaWalletAdapterWallet_signMessage = new WeakMap(), _SolanaWalletAdapterWallet_instances = new WeakSet(), _SolanaWalletAdapterWallet_connected = function _SolanaWalletAdapterWallet_connected() {\n  const publicKey = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").publicKey?.toBytes();\n  if (publicKey) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const address = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").publicKey.toBase58();\n    const account = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\");\n    if (!account || account.address !== address || account.chains.includes(__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_chain, \"f\")) || !bytesEqual(account.publicKey, publicKey)) {\n      __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_account, new SolanaWalletAdapterWalletAccount({\n        adapter: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\"),\n        address,\n        publicKey,\n        chains: [__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_chain, \"f\")]\n      }), \"f\");\n      __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_emit).call(this, 'change', {\n        accounts: this.accounts\n      });\n    }\n  }\n}, _SolanaWalletAdapterWallet_disconnected = function _SolanaWalletAdapterWallet_disconnected() {\n  if (__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\")) {\n    __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_account, undefined, \"f\");\n    __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_emit).call(this, 'change', {\n      accounts: this.accounts\n    });\n  }\n}, _SolanaWalletAdapterWallet_emit = function _SolanaWalletAdapterWallet_emit(event) {\n  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    args[_key4 - 1] = arguments[_key4];\n  }\n  // eslint-disable-next-line prefer-spread\n  __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_listeners, \"f\")[event]?.forEach(listener => listener.apply(null, args));\n}, _SolanaWalletAdapterWallet_off = function _SolanaWalletAdapterWallet_off(event, listener) {\n  __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_listeners, \"f\")[event] = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_listeners, \"f\")[event]?.filter(existingListener => listener !== existingListener);\n}, _SolanaWalletAdapterWallet_deserializeTransaction = function _SolanaWalletAdapterWallet_deserializeTransaction(serializedTransaction) {\n  const transaction = VersionedTransaction.deserialize(serializedTransaction);\n  if (!__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, \"f\").includes(transaction.version)) throw new Error('unsupported transaction version');\n  if (transaction.version === 'legacy' && arraysEqual(__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, \"f\"), ['legacy'])) return Transaction.from(serializedTransaction);\n  return transaction;\n};\n/** TODO: docs */\nexport function registerWalletAdapter(adapter, chain, endpoint) {\n  let match = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : wallet => wallet.name === adapter.name;\n  const {\n    register,\n    get,\n    on\n  } = getWallets();\n  const destructors = [];\n  function destroy() {\n    destructors.forEach(destroy => destroy());\n    destructors.length = 0;\n  }\n  function setup() {\n    // If the adapter is unsupported, or a standard wallet that matches it has already been registered, do nothing.\n    if (adapter.readyState === WalletReadyState.Unsupported || get().some(match)) return true;\n    // If the adapter isn't ready, try again later.\n    const ready = adapter.readyState === WalletReadyState.Installed || adapter.readyState === WalletReadyState.Loadable;\n    if (ready) {\n      const wallet = new SolanaWalletAdapterWallet(adapter, chain, endpoint);\n      destructors.push(() => wallet.destroy());\n      // Register the adapter wrapped as a standard wallet, and receive a function to unregister the adapter.\n      destructors.push(register(wallet));\n      // Whenever a standard wallet is registered ...\n      destructors.push(on('register', function () {\n        for (var _len5 = arguments.length, wallets = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n          wallets[_key5] = arguments[_key5];\n        }\n        // ... check if it matches the adapter.\n        if (wallets.some(match)) {\n          // If it does, remove the event listener and unregister the adapter.\n          destroy();\n        }\n      }));\n    }\n    return ready;\n  }\n  if (!setup()) {\n    function listener() {\n      if (setup()) {\n        adapter.off('readyStateChange', listener);\n      }\n    }\n    adapter.on('readyStateChange', listener);\n    destructors.push(() => adapter.off('readyStateChange', listener));\n  }\n  return destroy;\n}","map":{"version":3,"mappings":"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","names":["WalletReadyState","isSolanaChain","getEndpointForChain","Connection","Transaction","VersionedTransaction","getWallets","arraysEqual","bytesEqual","ReadonlyWalletAccount","bs58","isVersionedTransaction","SolanaWalletAdapterWalletAccount","constructor","adapter","address","publicKey","chains","features","push","_SolanaWalletAdapterWalletAccount_adapter","new","target","Object","freeze","__classPrivateFieldSet","SolanaWalletAdapterWallet","chain","endpoint","_SolanaWalletAdapterWallet_listeners","_SolanaWalletAdapterWallet_adapter","_SolanaWalletAdapterWallet_supportedTransactionVersions","_SolanaWalletAdapterWallet_chain","_SolanaWalletAdapterWallet_endpoint","_SolanaWalletAdapterWallet_account","_SolanaWalletAdapterWallet_connect","silent","__classPrivateFieldGet","connected","connect","accounts","_SolanaWalletAdapterWallet_disconnect","disconnect","_SolanaWalletAdapterWallet_on","event","listener","_SolanaWalletAdapterWallet_signAndSendTransaction","outputs","inputs","length","input","account","Error","transaction","commitment","preflightCommitment","skipPreflight","maxRetries","minContextSlot","options","connection","latestBlockhash","getLatestBlockhash","undefined","signature","sendTransaction","confirmTransaction","decode","_SolanaWalletAdapterWallet_signTransaction","signedTransaction","signTransaction","serializedTransaction","serialize","Uint8Array","requireAllSignatures","verifySignatures","transactions","map","signedTransactions","signAllTransactions","_SolanaWalletAdapterWallet_signMessage","signMessage","message","signedMessage","supportedTransactionVersions","on","version","name","icon","signAndSendTransaction","signTransactionFeature","signMessageFeature","destroy","off","toBytes","toBase58","includes","args","forEach","apply","filter","existingListener","deserialize","from","registerWalletAdapter","match","wallet","register","get","destructors","setup","readyState","Unsupported","some","ready","Installed","Loadable","wallets"],"sourceRoot":"","sources":["../../src/wallet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}