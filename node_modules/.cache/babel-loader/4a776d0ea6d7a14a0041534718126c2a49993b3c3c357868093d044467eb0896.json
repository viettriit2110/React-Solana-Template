{"ast":null,"code":"import { PublicKey } from '@solana/web3.js';\nimport QRCodeModal from '@walletconnect/qrcode-modal';\nimport WalletConnectClient from '@walletconnect/sign-client';\nimport { getSdkError, parseAccountId } from '@walletconnect/utils';\nimport base58 from 'bs58';\nimport { ClientNotInitializedError, QRCodeModalError } from './errors.js';\nexport var WalletConnectChainID;\n(function (WalletConnectChainID) {\n  WalletConnectChainID[\"Mainnet\"] = \"solana:4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZ\";\n  WalletConnectChainID[\"Devnet\"] = \"solana:8E9rvCKLFQia2Y35HXjjpWzj8weVo44K\";\n})(WalletConnectChainID || (WalletConnectChainID = {}));\nexport var WalletConnectRPCMethods;\n(function (WalletConnectRPCMethods) {\n  WalletConnectRPCMethods[\"signTransaction\"] = \"solana_signTransaction\";\n  WalletConnectRPCMethods[\"signMessage\"] = \"solana_signMessage\";\n})(WalletConnectRPCMethods || (WalletConnectRPCMethods = {}));\nconst getConnectParams = (chainId, pairingTopic) => ({\n  requiredNamespaces: {\n    solana: {\n      chains: [chainId],\n      methods: [WalletConnectRPCMethods.signTransaction, WalletConnectRPCMethods.signMessage],\n      events: []\n    }\n  },\n  pairingTopic\n});\nexport class WalletConnectWallet {\n  constructor(config) {\n    this._options = config.options;\n    this._network = config.network;\n  }\n  async connect() {\n    const client = this._client ?? (await WalletConnectClient.init(this._options));\n    const sessions = client.find(getConnectParams(this._network)).filter(s => s.acknowledged);\n    if (sessions.length) {\n      // select last matching session\n      this._session = sessions[sessions.length - 1];\n      // We assign this variable only after we're sure we've received approval\n      this._client = client;\n      return {\n        publicKey: this.publicKey\n      };\n    } else {\n      const {\n        uri,\n        approval\n      } = await client.connect(getConnectParams(this._network));\n      return new Promise((resolve, reject) => {\n        if (uri) {\n          QRCodeModal.open(uri, () => {\n            reject(new QRCodeModalError());\n          });\n        }\n        approval().then(session => {\n          this._session = session;\n          // We assign this variable only after we're sure we've received approval\n          this._client = client;\n          resolve({\n            publicKey: this.publicKey\n          });\n        }).catch(reject).finally(() => {\n          QRCodeModal.close();\n        });\n      });\n    }\n  }\n  async disconnect() {\n    if (this._client && this._session) {\n      await this._client.disconnect({\n        topic: this._session.topic,\n        reason: getSdkError('USER_DISCONNECTED')\n      });\n      this._session = undefined;\n    } else {\n      throw new ClientNotInitializedError();\n    }\n  }\n  get client() {\n    if (this._client) {\n      // TODO: using client.off throws an error\n      return Object.assign({}, this._client, {\n        off: this._client.removeListener\n      });\n      // return this._client;\n    } else {\n      throw new ClientNotInitializedError();\n    }\n  }\n  get publicKey() {\n    if (this._client && this._session) {\n      const {\n        address\n      } = parseAccountId(this._session.namespaces.solana.accounts[0]);\n      return new PublicKey(address);\n    } else {\n      throw new ClientNotInitializedError();\n    }\n  }\n  async signTransaction(transaction) {\n    if (this._client && this._session) {\n      const {\n        signature\n      } = await this._client.request({\n        chainId: this._network,\n        topic: this._session.topic,\n        request: {\n          method: WalletConnectRPCMethods.signTransaction,\n          params: {\n            ...transaction\n          }\n        }\n      });\n      transaction.addSignature(this.publicKey, Buffer.from(base58.decode(signature)));\n      return transaction;\n    } else {\n      throw new ClientNotInitializedError();\n    }\n  }\n  async signMessage(message) {\n    if (this._client && this._session) {\n      const {\n        signature\n      } = await this._client.request({\n        // The network does not change the output of message signing, but this is a required parameter for SignClient\n        chainId: this._network,\n        topic: this._session.topic,\n        request: {\n          method: WalletConnectRPCMethods.signMessage,\n          params: {\n            pubkey: this.publicKey.toString(),\n            message: base58.encode(message)\n          }\n        }\n      });\n      return base58.decode(signature);\n    } else {\n      throw new ClientNotInitializedError();\n    }\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,OAAOC,WAAW,MAAM,6BAA6B;AACrD,OAAOC,mBAAmB,MAAM,4BAA4B;AAE5D,SAASC,WAAW,EAAEC,cAAc,QAAQ,sBAAsB;AAClE,OAAOC,MAAM,MAAM,MAAM;AACzB,SAASC,yBAAyB,EAAEC,gBAAgB,QAAQ,aAAa;AAOzE,WAAYC,oBAGX;AAHD,WAAYA,oBAAoB;EAC5BA,2EAAmD;EACnDA,0EAAkD;AACtD,CAAC,EAHWA,oBAAoB,KAApBA,oBAAoB;AAKhC,WAAYC,uBAGX;AAHD,WAAYA,uBAAuB;EAC/BA,qEAA0C;EAC1CA,6DAAkC;AACtC,CAAC,EAHWA,uBAAuB,KAAvBA,uBAAuB;AASnC,MAAMC,gBAAgB,GAAG,CAACC,OAA6B,EAAEC,YAAqB,MAAiC;EAC3GC,kBAAkB,EAAE;IAChBC,MAAM,EAAE;MACJC,MAAM,EAAE,CAACJ,OAAO,CAAC;MACjBK,OAAO,EAAE,CAACP,uBAAuB,CAACQ,eAAe,EAAER,uBAAuB,CAACS,WAAW,CAAC;MACvFC,MAAM,EAAE;;GAEf;EACDP;CACH,CAAC;AAEF,OAAM,MAAOQ,mBAAmB;EAM5BC,YAAYC,MAAwC;IAChD,IAAI,CAACC,QAAQ,GAAGD,MAAM,CAACE,OAAO;IAC9B,IAAI,CAACC,QAAQ,GAAGH,MAAM,CAACI,OAAO;EAClC;EAEA,MAAMC,OAAO;IACT,MAAMC,MAAM,GAAG,IAAI,CAACC,OAAO,KAAK,MAAM3B,mBAAmB,CAAC4B,IAAI,CAAC,IAAI,CAACP,QAAQ,CAAC,CAAC;IAC9E,MAAMQ,QAAQ,GAAGH,MAAM,CAACI,IAAI,CAACtB,gBAAgB,CAAC,IAAI,CAACe,QAAQ,CAAC,CAAC,CAACQ,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACC,YAAY,CAAC;IAC3F,IAAIJ,QAAQ,CAACK,MAAM,EAAE;MACjB;MACA,IAAI,CAACC,QAAQ,GAAGN,QAAQ,CAACA,QAAQ,CAACK,MAAM,GAAG,CAAC,CAAC;MAC7C;MACA,IAAI,CAACP,OAAO,GAAGD,MAAM;MAErB,OAAO;QACHU,SAAS,EAAE,IAAI,CAACA;OACnB;KACJ,MAAM;MACH,MAAM;QAAEC,GAAG;QAAEC;MAAQ,CAAE,GAAG,MAAMZ,MAAM,CAACD,OAAO,CAACjB,gBAAgB,CAAC,IAAI,CAACe,QAAQ,CAAC,CAAC;MAC/E,OAAO,IAAIgB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;QACnC,IAAIJ,GAAG,EAAE;UACLtC,WAAW,CAAC2C,IAAI,CAACL,GAAG,EAAE,MAAK;YACvBI,MAAM,CAAC,IAAIpC,gBAAgB,EAAE,CAAC;UAClC,CAAC,CAAC;;QAGNiC,QAAQ,EAAE,CACLK,IAAI,CAAEC,OAAO,IAAI;UACd,IAAI,CAACT,QAAQ,GAAGS,OAAO;UACvB;UACA,IAAI,CAACjB,OAAO,GAAGD,MAAM;UAErBc,OAAO,CAAC;YAAEJ,SAAS,EAAE,IAAI,CAACA;UAAS,CAAE,CAAC;QAC1C,CAAC,CAAC,CACDS,KAAK,CAACJ,MAAM,CAAC,CACbK,OAAO,CAAC,MAAK;UACV/C,WAAW,CAACgD,KAAK,EAAE;QACvB,CAAC,CAAC;MACV,CAAC,CAAC;;EAEV;EAEA,MAAMC,UAAU;IACZ,IAAI,IAAI,CAACrB,OAAO,IAAI,IAAI,CAACQ,QAAQ,EAAE;MAC/B,MAAM,IAAI,CAACR,OAAO,CAACqB,UAAU,CAAC;QAC1BC,KAAK,EAAE,IAAI,CAACd,QAAQ,CAACc,KAAK;QAC1BC,MAAM,EAAEjD,WAAW,CAAC,mBAAmB;OAC1C,CAAC;MACF,IAAI,CAACkC,QAAQ,GAAGgB,SAAS;KAC5B,MAAM;MACH,MAAM,IAAI/C,yBAAyB,EAAE;;EAE7C;EAEA,IAAIsB,MAAM;IACN,IAAI,IAAI,CAACC,OAAO,EAAE;MACd;MACA,OAAOyB,MAAM,CAACC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC1B,OAAO,EAAE;QAAE2B,GAAG,EAAE,IAAI,CAAC3B,OAAO,CAAC4B;MAAc,CAAE,CAAC;MAC5E;KACH,MAAM;MACH,MAAM,IAAInD,yBAAyB,EAAE;;EAE7C;EAEA,IAAIgC,SAAS;IACT,IAAI,IAAI,CAACT,OAAO,IAAI,IAAI,CAACQ,QAAQ,EAAE;MAC/B,MAAM;QAAEqB;MAAO,CAAE,GAAGtD,cAAc,CAAC,IAAI,CAACiC,QAAQ,CAACsB,UAAU,CAAC7C,MAAM,CAAC8C,QAAQ,CAAC,CAAC,CAAC,CAAC;MAC/E,OAAO,IAAI5D,SAAS,CAAC0D,OAAO,CAAC;KAChC,MAAM;MACH,MAAM,IAAIpD,yBAAyB,EAAE;;EAE7C;EAEA,MAAMW,eAAe,CAAC4C,WAAwB;IAC1C,IAAI,IAAI,CAAChC,OAAO,IAAI,IAAI,CAACQ,QAAQ,EAAE;MAC/B,MAAM;QAAEyB;MAAS,CAAE,GAAG,MAAM,IAAI,CAACjC,OAAO,CAACkC,OAAO,CAAwB;QACpEpD,OAAO,EAAE,IAAI,CAACc,QAAQ;QACtB0B,KAAK,EAAE,IAAI,CAACd,QAAQ,CAACc,KAAK;QAC1BY,OAAO,EAAE;UAAEC,MAAM,EAAEvD,uBAAuB,CAACQ,eAAe;UAAEgD,MAAM,EAAE;YAAE,GAAGJ;UAAW;QAAE;OACzF,CAAC;MACFA,WAAW,CAACK,YAAY,CAAC,IAAI,CAAC5B,SAAS,EAAE6B,MAAM,CAACC,IAAI,CAAC/D,MAAM,CAACgE,MAAM,CAACP,SAAS,CAAC,CAAC,CAAC;MAE/E,OAAOD,WAAW;KACrB,MAAM;MACH,MAAM,IAAIvD,yBAAyB,EAAE;;EAE7C;EAEA,MAAMY,WAAW,CAACoD,OAAmB;IACjC,IAAI,IAAI,CAACzC,OAAO,IAAI,IAAI,CAACQ,QAAQ,EAAE;MAC/B,MAAM;QAAEyB;MAAS,CAAE,GAAG,MAAM,IAAI,CAACjC,OAAO,CAACkC,OAAO,CAAwB;QACpE;QACApD,OAAO,EAAE,IAAI,CAACc,QAAQ;QACtB0B,KAAK,EAAE,IAAI,CAACd,QAAQ,CAACc,KAAK;QAC1BY,OAAO,EAAE;UACLC,MAAM,EAAEvD,uBAAuB,CAACS,WAAW;UAC3C+C,MAAM,EAAE;YAAEM,MAAM,EAAE,IAAI,CAACjC,SAAS,CAACkC,QAAQ,EAAE;YAAEF,OAAO,EAAEjE,MAAM,CAACoE,MAAM,CAACH,OAAO;UAAC;;OAEnF,CAAC;MAEF,OAAOjE,MAAM,CAACgE,MAAM,CAACP,SAAS,CAAC;KAClC,MAAM;MACH,MAAM,IAAIxD,yBAAyB,EAAE;;EAE7C","names":["PublicKey","QRCodeModal","WalletConnectClient","getSdkError","parseAccountId","base58","ClientNotInitializedError","QRCodeModalError","WalletConnectChainID","WalletConnectRPCMethods","getConnectParams","chainId","pairingTopic","requiredNamespaces","solana","chains","methods","signTransaction","signMessage","events","WalletConnectWallet","constructor","config","_options","options","_network","network","connect","client","_client","init","sessions","find","filter","s","acknowledged","length","_session","publicKey","uri","approval","Promise","resolve","reject","open","then","session","catch","finally","close","disconnect","topic","reason","undefined","Object","assign","off","removeListener","address","namespaces","accounts","transaction","signature","request","method","params","addSignature","Buffer","from","decode","message","pubkey","toString","encode"],"sourceRoot":"","sources":["../../src/adapter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}