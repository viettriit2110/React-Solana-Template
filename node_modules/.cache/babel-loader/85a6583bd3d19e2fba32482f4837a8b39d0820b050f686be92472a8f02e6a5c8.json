{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar _a;\nimport semver from \"semver\";\n/**\n * The USB product IDs will be defined as MMII, encoding a model (MM) and an interface bitfield (II)\n *\n ** Model\n * Ledger Nano S : 0x10\n * Ledger Blue : 0x00\n * Ledger Nano X : 0x40\n *\n ** Interface support bitfield\n * Generic HID : 0x01\n * Keyboard HID : 0x02\n * U2F : 0x04\n * CCID : 0x08\n * WebUSB : 0x10\n */\nexport var IIGenericHID = 0x01;\nexport var IIKeyboardHID = 0x02;\nexport var IIU2F = 0x04;\nexport var IICCID = 0x08;\nexport var IIWebUSB = 0x10;\nexport var DeviceModelId;\n(function (DeviceModelId) {\n  DeviceModelId[\"blue\"] = \"blue\";\n  DeviceModelId[\"nanoS\"] = \"nanoS\";\n  DeviceModelId[\"nanoSP\"] = \"nanoSP\";\n  DeviceModelId[\"nanoX\"] = \"nanoX\";\n  DeviceModelId[\"nanoFTS\"] = \"nanoFTS\";\n})(DeviceModelId || (DeviceModelId = {}));\nvar devices = (_a = {}, _a[DeviceModelId.blue] = {\n  id: DeviceModelId.blue,\n  productName: \"Ledger Blue\",\n  productIdMM: 0x00,\n  legacyUsbProductId: 0x0000,\n  usbOnly: true,\n  memorySize: 480 * 1024,\n  masks: [0x31000000, 0x31010000],\n  getBlockSize: function (_firwareVersion) {\n    return 4 * 1024;\n  }\n}, _a[DeviceModelId.nanoS] = {\n  id: DeviceModelId.nanoS,\n  productName: \"Ledger Nano S\",\n  productIdMM: 0x10,\n  legacyUsbProductId: 0x0001,\n  usbOnly: true,\n  memorySize: 320 * 1024,\n  masks: [0x31100000],\n  getBlockSize: function (firmwareVersion) {\n    var _a;\n    return semver.lt((_a = semver.coerce(firmwareVersion)) !== null && _a !== void 0 ? _a : \"\", \"2.0.0\") ? 4 * 1024 : 2 * 1024;\n  }\n}, _a[DeviceModelId.nanoSP] = {\n  id: DeviceModelId.nanoSP,\n  productName: \"Ledger Nano S Plus\",\n  productIdMM: 0x50,\n  legacyUsbProductId: 0x0005,\n  usbOnly: true,\n  memorySize: 1536 * 1024,\n  masks: [0x33100000],\n  getBlockSize: function (_firmwareVersion) {\n    return 32;\n  }\n}, _a[DeviceModelId.nanoX] = {\n  id: DeviceModelId.nanoX,\n  productName: \"Ledger Nano X\",\n  productIdMM: 0x40,\n  legacyUsbProductId: 0x0004,\n  usbOnly: false,\n  memorySize: 2 * 1024 * 1024,\n  masks: [0x33000000],\n  getBlockSize: function (_firwareVersion) {\n    return 4 * 1024;\n  },\n  bluetoothSpec: [{\n    serviceUuid: \"13d63400-2c97-0004-0000-4c6564676572\",\n    notifyUuid: \"13d63400-2c97-0004-0001-4c6564676572\",\n    writeUuid: \"13d63400-2c97-0004-0002-4c6564676572\",\n    writeCmdUuid: \"13d63400-2c97-0004-0003-4c6564676572\"\n  }]\n}, _a[DeviceModelId.nanoFTS] = {\n  id: DeviceModelId.nanoFTS,\n  productName: \"Ledger Nano FTS\",\n  productIdMM: 0x60,\n  legacyUsbProductId: 0x0006,\n  usbOnly: false,\n  memorySize: 2 * 1024 * 1024,\n  masks: [0x33200000],\n  getBlockSize: function (_firwareVersion) {\n    return 4 * 1024;\n  },\n  bluetoothSpec: [{\n    serviceUuid: \"13d63400-2c97-6004-0000-4c6564676572\",\n    notifyUuid: \"13d63400-2c97-6004-0001-4c6564676572\",\n    writeUuid: \"13d63400-2c97-6004-0002-4c6564676572\",\n    writeCmdUuid: \"13d63400-2c97-6004-0003-4c6564676572\"\n  }]\n}, _a);\nvar productMap = {\n  Blue: DeviceModelId.blue,\n  \"Nano S\": DeviceModelId.nanoS,\n  \"Nano S Plus\": DeviceModelId.nanoSP,\n  \"Nano X\": DeviceModelId.nanoX,\n  \"Nano FTS\": DeviceModelId.nanoFTS\n};\nvar devicesList = Object.values(devices);\n/**\n *\n */\nexport var ledgerUSBVendorId = 0x2c97;\n/**\n *\n */\nexport var getDeviceModel = function (id) {\n  var info = devices[id];\n  if (!info) throw new Error(\"device '\" + id + \"' does not exist\");\n  return info;\n};\n/**\n * Given a `targetId`, return the deviceModel associated to it,\n * based on the first two bytes.\n */\nexport var identifyTargetId = function (targetId) {\n  var deviceModel = devicesList.find(function (_a) {\n    var masks = _a.masks;\n    return masks.find(function (mask) {\n      return (targetId & 0xffff0000) === mask;\n    });\n  });\n  return deviceModel;\n};\n/**\n *\n */\nexport var identifyUSBProductId = function (usbProductId) {\n  var legacy = devicesList.find(function (d) {\n    return d.legacyUsbProductId === usbProductId;\n  });\n  if (legacy) return legacy;\n  var mm = usbProductId >> 8;\n  var deviceModel = devicesList.find(function (d) {\n    return d.productIdMM === mm;\n  });\n  return deviceModel;\n};\nexport var identifyProductName = function (productName) {\n  var deviceModel = devicesList.find(function (d) {\n    return d.id === productMap[productName];\n  });\n  return deviceModel;\n};\nvar bluetoothServices = [];\nvar serviceUuidToInfos = {};\nfor (var id in devices) {\n  var deviceModel = devices[id];\n  var bluetoothSpec = deviceModel.bluetoothSpec;\n  if (bluetoothSpec) {\n    for (var i = 0; i < bluetoothSpec.length; i++) {\n      var spec = bluetoothSpec[i];\n      bluetoothServices.push(spec.serviceUuid);\n      serviceUuidToInfos[spec.serviceUuid] = serviceUuidToInfos[spec.serviceUuid.replace(/-/g, \"\")] = __assign({\n        deviceModel: deviceModel\n      }, spec);\n    }\n  }\n}\n/**\n *\n */\nexport var getBluetoothServiceUuids = function () {\n  return bluetoothServices;\n};\n/**\n *\n */\nexport var getInfosForServiceUuid = function (uuid) {\n  return serviceUuidToInfos[uuid.toLowerCase()];\n};","map":{"version":3,"mappings":";;;;;;;;;;;AAAA,OAAOA,MAAM,MAAM,QAAQ;AAE3B;;;;;;;;;;;;;;;AAeA,OAAO,IAAMC,YAAY,GAAG,IAAI;AAChC,OAAO,IAAMC,aAAa,GAAG,IAAI;AACjC,OAAO,IAAMC,KAAK,GAAG,IAAI;AACzB,OAAO,IAAMC,MAAM,GAAG,IAAI;AAC1B,OAAO,IAAMC,QAAQ,GAAG,IAAI;AAE5B,WAAYC,aAMX;AAND,WAAYA,aAAa;EACvBA,8BAAa;EACbA,gCAAe;EACfA,kCAAiB;EACjBA,gCAAe;EACfA,oCAAmB;AACrB,CAAC,EANWA,aAAa,KAAbA,aAAa;AAQzB,IAAMC,OAAO,aACXC,GAACF,aAAa,CAACG,IAAI,IAAG;EACpBC,EAAE,EAAEJ,aAAa,CAACG,IAAI;EACtBE,WAAW,EAAE,aAAa;EAC1BC,WAAW,EAAE,IAAI;EACjBC,kBAAkB,EAAE,MAAM;EAC1BC,OAAO,EAAE,IAAI;EACbC,UAAU,EAAE,GAAG,GAAG,IAAI;EACtBC,KAAK,EAAE,CAAC,UAAU,EAAE,UAAU,CAAC;EAC/BC,YAAY,EAAE,UAACC,eAAuB;IAAa,QAAC,GAAG,IAAI;EAAR;CACpD,EACDV,GAACF,aAAa,CAACa,KAAK,IAAG;EACrBT,EAAE,EAAEJ,aAAa,CAACa,KAAK;EACvBR,WAAW,EAAE,eAAe;EAC5BC,WAAW,EAAE,IAAI;EACjBC,kBAAkB,EAAE,MAAM;EAC1BC,OAAO,EAAE,IAAI;EACbC,UAAU,EAAE,GAAG,GAAG,IAAI;EACtBC,KAAK,EAAE,CAAC,UAAU,CAAC;EACnBC,YAAY,EAAE,UAACG,eAAuB;;IACpC,aAAM,CAACC,EAAE,CAAC,YAAM,CAACC,MAAM,CAACF,eAAe,CAAC,mCAAI,EAAE,EAAE,OAAO,CAAC,GACpD,CAAC,GAAG,IAAI,GACR,CAAC,GAAG,IAAI;;CACf,EACDZ,GAACF,aAAa,CAACiB,MAAM,IAAG;EACtBb,EAAE,EAAEJ,aAAa,CAACiB,MAAM;EACxBZ,WAAW,EAAE,oBAAoB;EACjCC,WAAW,EAAE,IAAI;EACjBC,kBAAkB,EAAE,MAAM;EAC1BC,OAAO,EAAE,IAAI;EACbC,UAAU,EAAE,IAAI,GAAG,IAAI;EACvBC,KAAK,EAAE,CAAC,UAAU,CAAC;EACnBC,YAAY,EAAE,UAACO,gBAAwB;IAAa,SAAE;EAAF;CACrD,EACDhB,GAACF,aAAa,CAACmB,KAAK,IAAG;EACrBf,EAAE,EAAEJ,aAAa,CAACmB,KAAK;EACvBd,WAAW,EAAE,eAAe;EAC5BC,WAAW,EAAE,IAAI;EACjBC,kBAAkB,EAAE,MAAM;EAC1BC,OAAO,EAAE,KAAK;EACdC,UAAU,EAAE,CAAC,GAAG,IAAI,GAAG,IAAI;EAC3BC,KAAK,EAAE,CAAC,UAAU,CAAC;EACnBC,YAAY,EAAE,UAACC,eAAuB;IAAa,QAAC,GAAG,IAAI;EAAR,CAAQ;EAC3DQ,aAAa,EAAE,CACb;IACEC,WAAW,EAAE,sCAAsC;IACnDC,UAAU,EAAE,sCAAsC;IAClDC,SAAS,EAAE,sCAAsC;IACjDC,YAAY,EAAE;GACf;CAEJ,EACDtB,GAACF,aAAa,CAACyB,OAAO,IAAG;EACvBrB,EAAE,EAAEJ,aAAa,CAACyB,OAAO;EACzBpB,WAAW,EAAE,iBAAiB;EAC9BC,WAAW,EAAE,IAAI;EACjBC,kBAAkB,EAAE,MAAM;EAC1BC,OAAO,EAAE,KAAK;EACdC,UAAU,EAAE,CAAC,GAAG,IAAI,GAAG,IAAI;EAC3BC,KAAK,EAAE,CAAC,UAAU,CAAC;EACnBC,YAAY,EAAE,UAACC,eAAuB;IAAa,QAAC,GAAG,IAAI;EAAR,CAAQ;EAC3DQ,aAAa,EAAE,CACb;IACEC,WAAW,EAAE,sCAAsC;IACnDC,UAAU,EAAE,sCAAsC;IAClDC,SAAS,EAAE,sCAAsC;IACjDC,YAAY,EAAE;GACf;CAEJ,KACF;AAED,IAAME,UAAU,GAAG;EACjBC,IAAI,EAAE3B,aAAa,CAACG,IAAI;EACxB,QAAQ,EAAEH,aAAa,CAACa,KAAK;EAC7B,aAAa,EAAEb,aAAa,CAACiB,MAAM;EACnC,QAAQ,EAAEjB,aAAa,CAACmB,KAAK;EAC7B,UAAU,EAAEnB,aAAa,CAACyB;CAC3B;AAED,IAAMG,WAAW,GAAkBC,MAAM,CAACC,MAAM,CAAC7B,OAAO,CAAC;AAEzD;;;AAGA,OAAO,IAAM8B,iBAAiB,GAAG,MAAM;AAEvC;;;AAGA,OAAO,IAAMC,cAAc,GAAG,UAAC5B,EAAiB;EAC9C,IAAM6B,IAAI,GAAGhC,OAAO,CAACG,EAAE,CAAC;EACxB,IAAI,CAAC6B,IAAI,EAAE,MAAM,IAAIC,KAAK,CAAC,UAAU,GAAG9B,EAAE,GAAG,kBAAkB,CAAC;EAChE,OAAO6B,IAAI;AACb,CAAC;AAED;;;;AAIA,OAAO,IAAME,gBAAgB,GAAG,UAC9BC,QAAgB;EAEhB,IAAMC,WAAW,GAAGT,WAAW,CAACU,IAAI,CAAC,UAACpC,EAAS;QAAPQ,KAAK;IAC3C,YAAK,CAAC4B,IAAI,CAAC,UAACC,IAAI;MAAK,QAACH,QAAQ,GAAG,UAAU,MAAMG,IAAI;IAAhC,CAAgC,CAAC;EAAtD,CAAsD,CACvD;EAED,OAAOF,WAAW;AACpB,CAAC;AAED;;;AAGA,OAAO,IAAMG,oBAAoB,GAAG,UAClCC,YAAoB;EAEpB,IAAMC,MAAM,GAAGd,WAAW,CAACU,IAAI,CAAC,UAACK,CAAC;IAAK,QAAC,CAACpC,kBAAkB,KAAKkC,YAAY;EAArC,CAAqC,CAAC;EAC7E,IAAIC,MAAM,EAAE,OAAOA,MAAM;EACzB,IAAME,EAAE,GAAGH,YAAY,IAAI,CAAC;EAC5B,IAAMJ,WAAW,GAAGT,WAAW,CAACU,IAAI,CAAC,UAACK,CAAC;IAAK,QAAC,CAACrC,WAAW,KAAKsC,EAAE;EAApB,CAAoB,CAAC;EACjE,OAAOP,WAAW;AACpB,CAAC;AAED,OAAO,IAAMQ,mBAAmB,GAAG,UACjCxC,WAAmB;EAEnB,IAAMgC,WAAW,GAAGT,WAAW,CAACU,IAAI,CAAC,UAACK,CAAC;IAAK,QAAC,CAACvC,EAAE,KAAKsB,UAAU,CAACrB,WAAW,CAAC;EAAhC,CAAgC,CAAC;EAC7E,OAAOgC,WAAW;AACpB,CAAC;AAED,IAAMS,iBAAiB,GAAa,EAAE;AACtC,IAAMC,kBAAkB,GAAmC,EAAE;AAE7D,KAAK,IAAM3C,EAAE,IAAIH,OAAO,EAAE;EACxB,IAAMoC,WAAW,GAAGpC,OAAO,CAACG,EAAE,CAAC;EACvB,iBAAa,GAAKiC,WAAW,cAAhB;EACrB,IAAIjB,aAAa,EAAE;IACjB,KAAK,IAAI4B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG5B,aAAa,CAAC6B,MAAM,EAAED,CAAC,EAAE,EAAE;MAC7C,IAAME,IAAI,GAAG9B,aAAa,CAAC4B,CAAC,CAAC;MAC7BF,iBAAiB,CAACK,IAAI,CAACD,IAAI,CAAC7B,WAAW,CAAC;MACxC0B,kBAAkB,CAACG,IAAI,CAAC7B,WAAW,CAAC,GAAG0B,kBAAkB,CACvDG,IAAI,CAAC7B,WAAW,CAAC+B,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CACnC;QACCf,WAAW;MAAA,GACRa,IAAI,CACR;;;;AAKP;;;AAGA,OAAO,IAAMG,wBAAwB,GAAG;EAAgB,wBAAiB;AAAjB,CAAiB;AAEzE;;;AAGA,OAAO,IAAMC,sBAAsB,GAAG,UACpCC,IAAY;EACmB,yBAAkB,CAACA,IAAI,CAACC,WAAW,EAAE,CAAC;AAAtC,CAAsC","names":["semver","IIGenericHID","IIKeyboardHID","IIU2F","IICCID","IIWebUSB","DeviceModelId","devices","_a","blue","id","productName","productIdMM","legacyUsbProductId","usbOnly","memorySize","masks","getBlockSize","_firwareVersion","nanoS","firmwareVersion","lt","coerce","nanoSP","_firmwareVersion","nanoX","bluetoothSpec","serviceUuid","notifyUuid","writeUuid","writeCmdUuid","nanoFTS","productMap","Blue","devicesList","Object","values","ledgerUSBVendorId","getDeviceModel","info","Error","identifyTargetId","targetId","deviceModel","find","mask","identifyUSBProductId","usbProductId","legacy","d","mm","identifyProductName","bluetoothServices","serviceUuidToInfos","i","length","spec","push","replace","getBluetoothServiceUuids","getInfosForServiceUuid","uuid","toLowerCase"],"sourceRoot":"","sources":["../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}