{"ast":null,"code":"import { BaseWalletAdapter } from './adapter.js';\nimport { WalletSendTransactionError, WalletSignTransactionError } from './errors.js';\nimport { isVersionedTransaction } from './types.js';\nexport class BaseSignerWalletAdapter extends BaseWalletAdapter {\n  async sendTransaction(transaction, connection) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let emit = true;\n    try {\n      if (isVersionedTransaction(transaction)) {\n        if (!this.supportedTransactionVersions) throw new WalletSendTransactionError(`Sending versioned transactions isn't supported by this wallet`);\n        if (!this.supportedTransactionVersions.has(transaction.version)) throw new WalletSendTransactionError(`Sending transaction version ${transaction.version} isn't supported by this wallet`);\n        try {\n          transaction = await this.signTransaction(transaction);\n          const rawTransaction = transaction.serialize();\n          return await connection.sendRawTransaction(rawTransaction, options);\n        } catch (error) {\n          // If the error was thrown by `signTransaction`, rethrow it and don't emit a duplicate event\n          if (error instanceof WalletSignTransactionError) {\n            emit = false;\n            throw error;\n          }\n          throw new WalletSendTransactionError(error?.message, error);\n        }\n      } else {\n        try {\n          const {\n            signers,\n            ...sendOptions\n          } = options;\n          transaction = await this.prepareTransaction(transaction, connection, sendOptions);\n          signers?.length && transaction.partialSign(...signers);\n          transaction = await this.signTransaction(transaction);\n          const rawTransaction = transaction.serialize();\n          return await connection.sendRawTransaction(rawTransaction, sendOptions);\n        } catch (error) {\n          // If the error was thrown by `signTransaction`, rethrow it and don't emit a duplicate event\n          if (error instanceof WalletSignTransactionError) {\n            emit = false;\n            throw error;\n          }\n          throw new WalletSendTransactionError(error?.message, error);\n        }\n      }\n    } catch (error) {\n      if (emit) {\n        this.emit('error', error);\n      }\n      throw error;\n    }\n  }\n  async signAllTransactions(transactions) {\n    for (const transaction of transactions) {\n      if (isVersionedTransaction(transaction)) {\n        if (!this.supportedTransactionVersions) throw new WalletSignTransactionError(`Signing versioned transactions isn't supported by this wallet`);\n        if (!this.supportedTransactionVersions.has(transaction.version)) throw new WalletSignTransactionError(`Signing transaction version ${transaction.version} isn't supported by this wallet`);\n      }\n    }\n    const signedTransactions = [];\n    for (const transaction of transactions) {\n      signedTransactions.push(await this.signTransaction(transaction));\n    }\n    return signedTransactions;\n  }\n}\nexport class BaseMessageSignerWalletAdapter extends BaseSignerWalletAdapter {}","map":{"version":3,"mappings":"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","names":["BaseWalletAdapter","WalletSendTransactionError","WalletSignTransactionError","isVersionedTransaction","BaseSignerWalletAdapter","sendTransaction","transaction","connection","options","emit","supportedTransactionVersions","has","version","signTransaction","rawTransaction","serialize","sendRawTransaction","error","message","signers","sendOptions","prepareTransaction","length","partialSign","signAllTransactions","transactions","signedTransactions","push","BaseMessageSignerWalletAdapter"],"sourceRoot":"","sources":["../../src/signer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}