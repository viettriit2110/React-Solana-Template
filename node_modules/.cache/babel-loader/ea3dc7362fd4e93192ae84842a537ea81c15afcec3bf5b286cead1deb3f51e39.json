{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\nvar bcUrRegistrySol = require('@keystonehq/bc-ur-registry-sol');\nvar sdk = require('@keystonehq/sdk');\nvar sdk__default = _interopDefault(sdk);\nvar bcUrRegistry = require('@keystonehq/bc-ur-registry');\nvar bs58 = _interopDefault(require('bs58'));\nvar uuid = require('uuid');\nvar web3_js = require('@solana/web3.js');\nclass DefaultInteractionProvider {\n  constructor() {\n    this.keystoneSDK = undefined;\n    this.readCryptoMultiAccounts = async () => {\n      const decodedResult = await this.keystoneSDK.read([sdk.SupportedResult.UR_CRYPTO_MULTI_ACCOUNTS], {\n        title: \"Sync Keystone\",\n        description: \"Please scan the QR code displayed on your Keystone\",\n        renderInitial: {\n          walletMode: \"Solflare\",\n          link: \"https://keyst.one/defi\"\n        },\n        URTypeErrorMessage: \"The scanned QR code is not the sync code from the Keystone hardware wallet. Please verify the code and try again\"\n      });\n      if (decodedResult.status === sdk.ReadStatus.success) {\n        const {\n          result\n        } = decodedResult;\n        return bcUrRegistry.CryptoMultiAccounts.fromCBOR(result.cbor);\n      } else {\n        throw new Error(\"Reading canceled\");\n      }\n    };\n    this.requestSignature = async (solSignRequest, requestTitle, requestDescription) => {\n      const status = await this.keystoneSDK.play(solSignRequest.toUR(), {\n        hasNext: true,\n        title: requestTitle,\n        description: requestDescription,\n        maxFragmentLength: 400\n      });\n      if (status === sdk.PlayStatus.canceled) throw new Error(\"#ktek_error[play-cancel]: play canceled\");\n      const result = await this.keystoneSDK.read([sdk.SupportedResult.UR_SOL_SIGNATURE], {\n        title: \"Scan Keystone\",\n        description: \"Please scan the QR code displayed on your Keystone\"\n      });\n      if (result.status === sdk.ReadStatus.canceled) {\n        throw new Error(\"#ktek_error[read-cancel]: read signature canceled\");\n      } else {\n        return bcUrRegistrySol.SolSignature.fromCBOR(result.result.cbor);\n      }\n    };\n    if (DefaultInteractionProvider.instance) {\n      return DefaultInteractionProvider.instance;\n    }\n    sdk__default.bootstrap();\n    this.keystoneSDK = sdk__default.getSdk();\n    DefaultInteractionProvider.instance = this;\n  }\n}\nconst keyringType = \"QR Hardware Wallet Device\";\nclass BaseKeyring {\n  constructor() {\n    this.getInteraction = () => {\n      throw new Error(\"KeystoneError#invalid_extends: method getInteraction not implemented, please extend BaseKeyring by overwriting this method.\");\n    };\n    this.type = keyringType;\n    this.requestSignature = async (_requestId, signRequest, requestTitle, requestDescription) => {\n      const solSignature = await this.getInteraction().requestSignature(signRequest, requestTitle, requestDescription);\n      const requestIdBuffer = solSignature.getRequestId();\n      const signature = solSignature.getSignature();\n      if (requestIdBuffer) {\n        const requestId = uuid.stringify(requestIdBuffer);\n        if (requestId !== _requestId) {\n          throw new Error(\"KeystoneError#invalid_data: read signature error: mismatched requestId\");\n        }\n      }\n      return signature;\n    };\n    this.getName = () => {\n      return this.name;\n    }; //common props\n\n    this.keys = [];\n    this.name = \"QR Hardware\";\n    this.initialized = false;\n    this.device = \"\";\n    this.xfp = \"\";\n  } //initial read\n\n  async readKeyring() {\n    const result = await this.getInteraction().readCryptoMultiAccounts();\n    this.syncKeyring(result);\n  }\n  syncKeyring(data) {\n    var _data$getKeys$0$getOr;\n    const keys = data.getKeys();\n    this.device = data.getDevice();\n    this.xfp = (_data$getKeys$0$getOr = data.getKeys()[0].getOrigin().getSourceFingerprint()) == null ? void 0 : _data$getKeys$0$getOr.toString(\"hex\");\n    this.name = data.getKeys()[0].getName();\n    this.keys = keys.map((each, index) => ({\n      hdPath: each.getOrigin().getPath(),\n      pubKey: bs58.encode(each.getKey()),\n      index\n    }));\n    this.initialized = true;\n  }\n  syncKeyringData(_ref) {\n    let {\n      xfp,\n      keys,\n      name = \"QR Hardware\",\n      device\n    } = _ref;\n    this.xfp = xfp;\n    this.name = name;\n    this.keys = keys;\n    this.device = device;\n    this.initialized = true;\n  }\n  getAccounts() {\n    if (!this.initialized) {\n      return [];\n    }\n    return this.keys;\n  }\n  async signTransaction(pubKey, tx) {\n    const signature = await this._getSignature(pubKey, Buffer.from(tx.serializeMessage()), bcUrRegistrySol.SignType.Transaction);\n    tx.addSignature(new web3_js.PublicKey(pubKey), signature);\n    return tx;\n  }\n  async signMessage(pubKey, messageHex) {\n    return await this._getSignature(pubKey, Buffer.from(messageHex), bcUrRegistrySol.SignType.Message);\n  }\n  async createSignature(pubKey, messageHex) {\n    try {\n      const messageInstance = web3_js.Message.from(messageHex);\n      const transaction = web3_js.Transaction.populate(messageInstance, []);\n      if (transaction) {\n        return this._getSignature(pubKey, Buffer.from(messageHex), bcUrRegistrySol.SignType.Transaction);\n      }\n    } catch (e) {}\n    return this.signMessage(pubKey, messageHex);\n  }\n  async _getSignature(pubKey, messageHex, signType) {\n    const requestId = uuid.v4();\n    const account = this.getAccounts().find(account => account.pubKey == pubKey);\n    const solSignRequest = bcUrRegistrySol.SolSignRequest.constructSOLRequest(messageHex, account.hdPath, this.xfp, signType, requestId);\n    return this.requestSignature(requestId, solSignRequest, \"Scan with your Keystone\", 'After your Keystone has signed this message, click on \"Scan Keystone\" to receive the signature');\n  }\n}\nBaseKeyring.type = keyringType;\nclass DefaultKeyring extends BaseKeyring {\n  constructor() {\n    super();\n    this.getInteraction = () => {\n      return new DefaultInteractionProvider();\n    };\n  }\n  static getEmptyKeyring() {\n    return new DefaultKeyring();\n  }\n}\nDefaultKeyring.type = BaseKeyring.type;\nexports.BaseKeyring = BaseKeyring;\nexports.DefaultKeyring = DefaultKeyring;","map":{"version":3,"mappings":"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","names":["DefaultInteractionProvider","constructor","undefined","decodedResult","keystoneSDK","read","SupportedResult","UR_CRYPTO_MULTI_ACCOUNTS","title","description","renderInitial","walletMode","link","URTypeErrorMessage","status","ReadStatus","success","result","CryptoMultiAccounts","fromCBOR","cbor","Error","solSignRequest","requestTitle","requestDescription","play","toUR","hasNext","maxFragmentLength","PlayStatus","canceled","UR_SOL_SIGNATURE","SolSignature","instance","sdk","bootstrap","getSdk","keyringType","BaseKeyring","_requestId","signRequest","solSignature","getInteraction","requestSignature","requestIdBuffer","getRequestId","signature","getSignature","requestId","uuid","name","keys","initialized","device","xfp","readKeyring","readCryptoMultiAccounts","syncKeyring","data","getKeys","getDevice","getOrigin","getSourceFingerprint","_data$getKeys$0$getOr","toString","getName","map","each","index","hdPath","getPath","pubKey","bs58","encode","getKey","syncKeyringData","getAccounts","signTransaction","tx","_getSignature","Buffer","from","serializeMessage","SignType","Transaction","addSignature","PublicKey","signMessage","messageHex","Message","createSignature","messageInstance","transaction","populate","e","signType","account","find","SolSignRequest","constructSOLRequest","DefaultKeyring","getEmptyKeyring","type"],"sources":["../src/DefaultInteractionProvider.ts","../src/BaseKeyring.ts","../src/DefaultKeyring.ts"],"sourcesContent":["import { SolSignature, SolSignRequest } from \"@keystonehq/bc-ur-registry-sol\";\nimport { InteractionProvider } from \"./InteractionProvider\";\nimport sdk, { PlayStatus, ReadStatus, SupportedResult } from \"@keystonehq/sdk\";\nimport { CryptoMultiAccounts } from \"@keystonehq/bc-ur-registry\";\n\nexport class DefaultInteractionProvider implements InteractionProvider {\n  private static instance;\n  private keystoneSDK = undefined;\n\n  constructor() {\n    if (DefaultInteractionProvider.instance) {\n      return DefaultInteractionProvider.instance;\n    }\n    sdk.bootstrap();\n    this.keystoneSDK = sdk.getSdk();\n    DefaultInteractionProvider.instance = this;\n  }\n\n  public readCryptoMultiAccounts = async () => {\n    const decodedResult = await this.keystoneSDK.read(\n      [SupportedResult.UR_CRYPTO_MULTI_ACCOUNTS],\n      {\n        title: \"Sync Keystone\",\n        description: \"Please scan the QR code displayed on your Keystone\",\n        renderInitial: {\n          walletMode: \"Solflare\",\n          link: \"https://keyst.one/defi\",\n        },\n        URTypeErrorMessage:\n          \"The scanned QR code is not the sync code from the Keystone hardware wallet. Please verify the code and try again\",\n      }\n    );\n    if (decodedResult.status === ReadStatus.success) {\n      const { result } = decodedResult;\n      return CryptoMultiAccounts.fromCBOR(result.cbor);\n    } else {\n      throw new Error(\"Reading canceled\");\n    }\n  };\n\n  public requestSignature = async (\n    solSignRequest: SolSignRequest,\n    requestTitle?: string,\n    requestDescription?: string\n  ) => {\n    const status = await this.keystoneSDK.play(solSignRequest.toUR(), {\n      hasNext: true,\n      title: requestTitle,\n      description: requestDescription,\n      maxFragmentLength: 400\n    });\n    if (status === PlayStatus.canceled)\n      throw new Error(\"#ktek_error[play-cancel]: play canceled\");\n    const result = await this.keystoneSDK.read(\n      [SupportedResult.UR_SOL_SIGNATURE],\n      {\n        title: \"Scan Keystone\",\n        description: \"Please scan the QR code displayed on your Keystone\",\n      }\n    );\n    if (result.status === ReadStatus.canceled) {\n      throw new Error(\"#ktek_error[read-cancel]: read signature canceled\");\n    } else {\n      return SolSignature.fromCBOR(result.result.cbor);\n    }\n  };\n}\n","import bs58 from \"bs58\";\nimport * as uuid from \"uuid\";\nimport { Message, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { InteractionProvider } from \"./InteractionProvider\";\nimport { CryptoMultiAccounts } from \"@keystonehq/bc-ur-registry\";\nimport { SolSignRequest, SignType } from \"@keystonehq/bc-ur-registry-sol\";\n\nconst keyringType = \"QR Hardware Wallet Device\";\n\nexport interface HDKey {\n  hdPath: string;\n  pubKey: string;\n  index: number;\n}\n\ninterface KeyringInitData {\n  xfp: string;\n  keys: HDKey[];\n  name?: string;\n  device?: string;\n}\n\nexport class BaseKeyring {\n  getInteraction = (): InteractionProvider => {\n    throw new Error(\n      \"KeystoneError#invalid_extends: method getInteraction not implemented, please extend BaseKeyring by overwriting this method.\"\n    );\n  };\n  static type = keyringType;\n  protected xfp: string;\n  protected type = keyringType;\n  protected initialized: boolean;\n  protected keys: HDKey[];\n  protected name: string;\n  protected device: string;\n  constructor() {\n    //common props\n    this.keys = [];\n    this.name = \"QR Hardware\";\n    this.initialized = false;\n    this.device = \"\";\n    this.xfp = \"\";\n  }\n\n  protected requestSignature = async (\n    _requestId: string,\n    signRequest: SolSignRequest,\n    requestTitle?: string,\n    requestDescription?: string\n  ): Promise<Buffer> => {\n    const solSignature = await this.getInteraction().requestSignature(\n      signRequest,\n      requestTitle,\n      requestDescription\n    );\n    const requestIdBuffer = solSignature.getRequestId();\n    const signature = solSignature.getSignature();\n    if (requestIdBuffer) {\n      const requestId = uuid.stringify(requestIdBuffer);\n      if (requestId !== _requestId) {\n        throw new Error(\n          \"KeystoneError#invalid_data: read signature error: mismatched requestId\"\n        );\n      }\n    }\n    return signature;\n  };\n\n  //initial read\n  async readKeyring(): Promise<void> {\n    const result = await this.getInteraction().readCryptoMultiAccounts();\n    this.syncKeyring(result);\n  }\n\n  public syncKeyring(data: CryptoMultiAccounts): void {\n    const keys = data.getKeys();\n    this.device = data.getDevice();\n    this.xfp = data\n      .getKeys()[0]\n      .getOrigin()\n      .getSourceFingerprint()\n      ?.toString(\"hex\");\n    this.name = data.getKeys()[0].getName();\n    this.keys = keys.map((each, index) => ({\n      hdPath: each.getOrigin().getPath(),\n      pubKey: bs58.encode(each.getKey()),\n      index,\n    }));\n    this.initialized = true;\n  }\n\n  public syncKeyringData({xfp, keys, name = \"QR Hardware\", device}: KeyringInitData): void {\n    this.xfp = xfp\n    this.name = name\n    this.keys = keys\n    this.device = device\n    this.initialized = true;\n  }\n\n  public getName = (): string => {\n    return this.name;\n  };\n\n  getAccounts() {\n    if (!this.initialized) {\n      return [];\n    }\n    return this.keys;\n  }\n\n  async signTransaction(pubKey: string, tx: Transaction): Promise<Transaction> {\n    const signature = await this._getSignature(pubKey, Buffer.from(tx.serializeMessage() as unknown as ArrayBuffer), SignType.Transaction)\n    tx.addSignature(new PublicKey(pubKey), signature);\n    return tx;\n  }\n\n  async signMessage(\n    pubKey: string,\n    messageHex: Uint8Array\n  ): Promise<Uint8Array> {\n    return await this._getSignature(pubKey, Buffer.from(messageHex), SignType.Message)\n  }\n\n  async createSignature(pubKey: string, messageHex: Uint8Array): Promise<Uint8Array>{\n    try{\n      const messageInstance = Message.from(messageHex);\n      const transaction = Transaction.populate(messageInstance, []);\n      if (transaction) {\n        return this._getSignature(pubKey, Buffer.from(messageHex),SignType.Transaction)\n      }\n    }catch(e){\n    }\n    return this.signMessage(pubKey, messageHex)\n  }\n\n  async _getSignature(pubKey: string, messageHex: Buffer, signType): Promise<Buffer>{\n    const requestId = uuid.v4();\n    const account = this.getAccounts().find(\n        (account) => account.pubKey == pubKey\n    );\n    const solSignRequest = SolSignRequest.constructSOLRequest(\n        messageHex,\n        account.hdPath,\n        this.xfp,\n        signType,\n        requestId,\n    );\n    return this.requestSignature(\n        requestId,\n        solSignRequest,\n        \"Scan with your Keystone\",\n        'After your Keystone has signed this message, click on \"Scan Keystone\" to receive the signature'\n    );\n  }\n}\n","import { DefaultInteractionProvider } from \"./DefaultInteractionProvider\";\nimport { BaseKeyring } from \"./BaseKeyring\";\n\nexport class DefaultKeyring extends BaseKeyring {\n  static type = BaseKeyring.type;\n\n  static getEmptyKeyring(): DefaultKeyring {\n    return new DefaultKeyring();\n  }\n\n  constructor() {\n    super();\n  }\n\n  getInteraction = () => {\n    return new DefaultInteractionProvider();\n  };\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}