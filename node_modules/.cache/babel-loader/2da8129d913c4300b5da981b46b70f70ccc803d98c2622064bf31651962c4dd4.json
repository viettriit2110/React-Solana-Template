{"ast":null,"code":"/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst CURVE = Object.freeze({\n  a: _0n,\n  b: BigInt(7),\n  P: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n  n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n  h: _1n,\n  Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n  Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n  beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee')\n});\nexport { CURVE };\nfunction weistrass(x) {\n  const {\n    a,\n    b\n  } = CURVE;\n  const x2 = mod(x * x);\n  const x3 = mod(x2 * x);\n  return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass ShaError extends Error {\n  constructor(message) {\n    super(message);\n  }\n}\nclass JacobianPoint {\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  static fromAffine(p) {\n    if (!(p instanceof Point)) {\n      throw new TypeError('JacobianPoint#fromAffine: expected Point');\n    }\n    return new JacobianPoint(p.x, p.y, _1n);\n  }\n  static toAffineBatch(points) {\n    const toInv = invertBatch(points.map(p => p.z));\n    return points.map((p, i) => p.toAffine(toInv[i]));\n  }\n  static normalizeZ(points) {\n    return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n  }\n  equals(other) {\n    if (!(other instanceof JacobianPoint)) throw new TypeError('JacobianPoint expected');\n    const {\n      x: X1,\n      y: Y1,\n      z: Z1\n    } = this;\n    const {\n      x: X2,\n      y: Y2,\n      z: Z2\n    } = other;\n    const Z1Z1 = mod(Z1 * Z1);\n    const Z2Z2 = mod(Z2 * Z2);\n    const U1 = mod(X1 * Z2Z2);\n    const U2 = mod(X2 * Z1Z1);\n    const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n    const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n    return U1 === U2 && S1 === S2;\n  }\n  negate() {\n    return new JacobianPoint(this.x, mod(-this.y), this.z);\n  }\n  double() {\n    const {\n      x: X1,\n      y: Y1,\n      z: Z1\n    } = this;\n    const A = mod(X1 * X1);\n    const B = mod(Y1 * Y1);\n    const C = mod(B * B);\n    const x1b = X1 + B;\n    const D = mod(_2n * (mod(x1b * x1b) - A - C));\n    const E = mod(_3n * A);\n    const F = mod(E * E);\n    const X3 = mod(F - _2n * D);\n    const Y3 = mod(E * (D - X3) - _8n * C);\n    const Z3 = mod(_2n * Y1 * Z1);\n    return new JacobianPoint(X3, Y3, Z3);\n  }\n  add(other) {\n    if (!(other instanceof JacobianPoint)) throw new TypeError('JacobianPoint expected');\n    const {\n      x: X1,\n      y: Y1,\n      z: Z1\n    } = this;\n    const {\n      x: X2,\n      y: Y2,\n      z: Z2\n    } = other;\n    if (X2 === _0n || Y2 === _0n) return this;\n    if (X1 === _0n || Y1 === _0n) return other;\n    const Z1Z1 = mod(Z1 * Z1);\n    const Z2Z2 = mod(Z2 * Z2);\n    const U1 = mod(X1 * Z2Z2);\n    const U2 = mod(X2 * Z1Z1);\n    const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n    const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n    const H = mod(U2 - U1);\n    const r = mod(S2 - S1);\n    if (H === _0n) {\n      if (r === _0n) {\n        return this.double();\n      } else {\n        return JacobianPoint.ZERO;\n      }\n    }\n    const HH = mod(H * H);\n    const HHH = mod(H * HH);\n    const V = mod(U1 * HH);\n    const X3 = mod(r * r - HHH - _2n * V);\n    const Y3 = mod(r * (V - X3) - S1 * HHH);\n    const Z3 = mod(Z1 * Z2 * H);\n    return new JacobianPoint(X3, Y3, Z3);\n  }\n  subtract(other) {\n    return this.add(other.negate());\n  }\n  multiplyUnsafe(scalar) {\n    const P0 = JacobianPoint.ZERO;\n    if (typeof scalar === 'bigint' && scalar === _0n) return P0;\n    let n = normalizeScalar(scalar);\n    if (n === _1n) return this;\n    if (!USE_ENDOMORPHISM) {\n      let p = P0;\n      let d = this;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    }\n    let {\n      k1neg,\n      k1,\n      k2neg,\n      k2\n    } = splitScalarEndo(n);\n    let k1p = P0;\n    let k2p = P0;\n    let d = this;\n    while (k1 > _0n || k2 > _0n) {\n      if (k1 & _1n) k1p = k1p.add(d);\n      if (k2 & _1n) k2p = k2p.add(d);\n      d = d.double();\n      k1 >>= _1n;\n      k2 >>= _1n;\n    }\n    if (k1neg) k1p = k1p.negate();\n    if (k2neg) k2p = k2p.negate();\n    k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n    return k1p.add(k2p);\n  }\n  precomputeWindow(W) {\n    const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n    const points = [];\n    let p = this;\n    let base = p;\n    for (let window = 0; window < windows; window++) {\n      base = p;\n      points.push(base);\n      for (let i = 1; i < 2 ** (W - 1); i++) {\n        base = base.add(p);\n        points.push(base);\n      }\n      p = base.double();\n    }\n    return points;\n  }\n  wNAF(n, affinePoint) {\n    if (!affinePoint && this.equals(JacobianPoint.BASE)) affinePoint = Point.BASE;\n    const W = affinePoint && affinePoint._WINDOW_SIZE || 1;\n    if (256 % W) {\n      throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n    }\n    let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n    if (!precomputes) {\n      precomputes = this.precomputeWindow(W);\n      if (affinePoint && W !== 1) {\n        precomputes = JacobianPoint.normalizeZ(precomputes);\n        pointPrecomputes.set(affinePoint, precomputes);\n      }\n    }\n    let p = JacobianPoint.ZERO;\n    let f = JacobianPoint.ZERO;\n    const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n    const windowSize = 2 ** (W - 1);\n    const mask = BigInt(2 ** W - 1);\n    const maxNumber = 2 ** W;\n    const shiftBy = BigInt(W);\n    for (let window = 0; window < windows; window++) {\n      const offset = window * windowSize;\n      let wbits = Number(n & mask);\n      n >>= shiftBy;\n      if (wbits > windowSize) {\n        wbits -= maxNumber;\n        n += _1n;\n      }\n      if (wbits === 0) {\n        let pr = precomputes[offset];\n        if (window % 2) pr = pr.negate();\n        f = f.add(pr);\n      } else {\n        let cached = precomputes[offset + Math.abs(wbits) - 1];\n        if (wbits < 0) cached = cached.negate();\n        p = p.add(cached);\n      }\n    }\n    return {\n      p,\n      f\n    };\n  }\n  multiply(scalar, affinePoint) {\n    let n = normalizeScalar(scalar);\n    let point;\n    let fake;\n    if (USE_ENDOMORPHISM) {\n      const {\n        k1neg,\n        k1,\n        k2neg,\n        k2\n      } = splitScalarEndo(n);\n      let {\n        p: k1p,\n        f: f1p\n      } = this.wNAF(k1, affinePoint);\n      let {\n        p: k2p,\n        f: f2p\n      } = this.wNAF(k2, affinePoint);\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n      point = k1p.add(k2p);\n      fake = f1p.add(f2p);\n    } else {\n      const {\n        p,\n        f\n      } = this.wNAF(n, affinePoint);\n      point = p;\n      fake = f;\n    }\n    return JacobianPoint.normalizeZ([point, fake])[0];\n  }\n  toAffine() {\n    let invZ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : invert(this.z);\n    const {\n      x,\n      y,\n      z\n    } = this;\n    const iz1 = invZ;\n    const iz2 = mod(iz1 * iz1);\n    const iz3 = mod(iz2 * iz1);\n    const ax = mod(x * iz2);\n    const ay = mod(y * iz3);\n    const zz = mod(z * iz1);\n    if (zz !== _1n) throw new Error('invZ was invalid');\n    return new Point(ax, ay);\n  }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  _setWindowSize(windowSize) {\n    this._WINDOW_SIZE = windowSize;\n    pointPrecomputes.delete(this);\n  }\n  hasEvenY() {\n    return this.y % _2n === _0n;\n  }\n  static fromCompressedHex(bytes) {\n    const isShort = bytes.length === 32;\n    const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n    if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n    const y2 = weistrass(x);\n    let y = sqrtMod(y2);\n    const isYOdd = (y & _1n) === _1n;\n    if (isShort) {\n      if (isYOdd) y = mod(-y);\n    } else {\n      const isFirstByteOdd = (bytes[0] & 1) === 1;\n      if (isFirstByteOdd !== isYOdd) y = mod(-y);\n    }\n    const point = new Point(x, y);\n    point.assertValidity();\n    return point;\n  }\n  static fromUncompressedHex(bytes) {\n    const x = bytesToNumber(bytes.subarray(1, 33));\n    const y = bytesToNumber(bytes.subarray(33, 65));\n    const point = new Point(x, y);\n    point.assertValidity();\n    return point;\n  }\n  static fromHex(hex) {\n    const bytes = ensureBytes(hex);\n    const len = bytes.length;\n    const header = bytes[0];\n    if (len === 32 || len === 33 && (header === 0x02 || header === 0x03)) {\n      return this.fromCompressedHex(bytes);\n    }\n    if (len === 65 && header === 0x04) return this.fromUncompressedHex(bytes);\n    throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${len}`);\n  }\n  static fromPrivateKey(privateKey) {\n    return Point.BASE.multiply(normalizePrivateKey(privateKey));\n  }\n  static fromSignature(msgHash, signature, recovery) {\n    msgHash = ensureBytes(msgHash);\n    const h = truncateHash(msgHash);\n    const {\n      r,\n      s\n    } = normalizeSignature(signature);\n    if (recovery !== 0 && recovery !== 1) {\n      throw new Error('Cannot recover signature: invalid recovery bit');\n    }\n    const prefix = recovery & 1 ? '03' : '02';\n    const R = Point.fromHex(prefix + numTo32bStr(r));\n    const {\n      n\n    } = CURVE;\n    const rinv = invert(r, n);\n    const u1 = mod(-h * rinv, n);\n    const u2 = mod(s * rinv, n);\n    const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n    if (!Q) throw new Error('Cannot recover signature: point at infinify');\n    Q.assertValidity();\n    return Q;\n  }\n  toRawBytes() {\n    let isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return hexToBytes(this.toHex(isCompressed));\n  }\n  toHex() {\n    let isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const x = numTo32bStr(this.x);\n    if (isCompressed) {\n      const prefix = this.hasEvenY() ? '02' : '03';\n      return `${prefix}${x}`;\n    } else {\n      return `04${x}${numTo32bStr(this.y)}`;\n    }\n  }\n  toHexX() {\n    return this.toHex(true).slice(2);\n  }\n  toRawX() {\n    return this.toRawBytes(true).slice(1);\n  }\n  assertValidity() {\n    const msg = 'Point is not on elliptic curve';\n    const {\n      x,\n      y\n    } = this;\n    if (!isValidFieldElement(x) || !isValidFieldElement(y)) throw new Error(msg);\n    const left = mod(y * y);\n    const right = weistrass(x);\n    if (mod(left - right) !== _0n) throw new Error(msg);\n  }\n  equals(other) {\n    return this.x === other.x && this.y === other.y;\n  }\n  negate() {\n    return new Point(this.x, mod(-this.y));\n  }\n  double() {\n    return JacobianPoint.fromAffine(this).double().toAffine();\n  }\n  add(other) {\n    return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n  }\n  subtract(other) {\n    return this.add(other.negate());\n  }\n  multiply(scalar) {\n    return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n  }\n  multiplyAndAddUnsafe(Q, a, b) {\n    const P = JacobianPoint.fromAffine(this);\n    const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n    const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n    const sum = aP.add(bQ);\n    return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n  }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n  return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n  if (data.length < 2 || data[0] !== 0x02) {\n    throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n  }\n  const len = data[1];\n  const res = data.subarray(2, len + 2);\n  if (!len || res.length !== len) {\n    throw new Error(`Invalid signature integer: wrong length`);\n  }\n  if (res[0] === 0x00 && res[1] <= 0x7f) {\n    throw new Error('Invalid signature integer: trailing length');\n  }\n  return {\n    data: bytesToNumber(res),\n    left: data.subarray(len + 2)\n  };\n}\nfunction parseDERSignature(data) {\n  if (data.length < 2 || data[0] != 0x30) {\n    throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n  }\n  if (data[1] !== data.length - 2) {\n    throw new Error('Invalid signature: incorrect length');\n  }\n  const {\n    data: r,\n    left: sBytes\n  } = parseDERInt(data.subarray(2));\n  const {\n    data: s,\n    left: rBytesLeft\n  } = parseDERInt(sBytes);\n  if (rBytesLeft.length) {\n    throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n  }\n  return {\n    r,\n    s\n  };\n}\nexport class Signature {\n  constructor(r, s) {\n    this.r = r;\n    this.s = s;\n    this.assertValidity();\n  }\n  static fromCompact(hex) {\n    const arr = hex instanceof Uint8Array;\n    const name = 'Signature.fromCompact';\n    if (typeof hex !== 'string' && !arr) throw new TypeError(`${name}: Expected string or Uint8Array`);\n    const str = arr ? bytesToHex(hex) : hex;\n    if (str.length !== 128) throw new Error(`${name}: Expected 64-byte hex`);\n    return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n  }\n  static fromDER(hex) {\n    const arr = hex instanceof Uint8Array;\n    if (typeof hex !== 'string' && !arr) throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n    const {\n      r,\n      s\n    } = parseDERSignature(arr ? hex : hexToBytes(hex));\n    return new Signature(r, s);\n  }\n  static fromHex(hex) {\n    return this.fromDER(hex);\n  }\n  assertValidity() {\n    const {\n      r,\n      s\n    } = this;\n    if (!isWithinCurveOrder(r)) throw new Error('Invalid Signature: r must be 0 < r < n');\n    if (!isWithinCurveOrder(s)) throw new Error('Invalid Signature: s must be 0 < s < n');\n  }\n  hasHighS() {\n    const HALF = CURVE.n >> _1n;\n    return this.s > HALF;\n  }\n  normalizeS() {\n    return this.hasHighS() ? new Signature(this.r, CURVE.n - this.s) : this;\n  }\n  toDERRawBytes() {\n    let isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return hexToBytes(this.toDERHex(isCompressed));\n  }\n  toDERHex() {\n    let isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const sHex = sliceDER(numberToHexUnpadded(this.s));\n    if (isCompressed) return sHex;\n    const rHex = sliceDER(numberToHexUnpadded(this.r));\n    const rLen = numberToHexUnpadded(rHex.length / 2);\n    const sLen = numberToHexUnpadded(sHex.length / 2);\n    const length = numberToHexUnpadded(rHex.length / 2 + sHex.length / 2 + 4);\n    return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n  }\n  toRawBytes() {\n    return this.toDERRawBytes();\n  }\n  toHex() {\n    return this.toDERHex();\n  }\n  toCompactRawBytes() {\n    return hexToBytes(this.toCompactHex());\n  }\n  toCompactHex() {\n    return numTo32bStr(this.r) + numTo32bStr(this.s);\n  }\n}\nfunction concatBytes() {\n  for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrays[_key] = arguments[_key];\n  }\n  if (!arrays.every(b => b instanceof Uint8Array)) throw new Error('Uint8Array list expected');\n  if (arrays.length === 1) return arrays[0];\n  const length = arrays.reduce((a, arr) => a + arr.length, 0);\n  const result = new Uint8Array(length);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const arr = arrays[i];\n    result.set(arr, pad);\n    pad += arr.length;\n  }\n  return result;\n}\nconst hexes = Array.from({\n  length: 256\n}, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n  if (!(uint8a instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  let hex = '';\n  for (let i = 0; i < uint8a.length; i++) {\n    hex += hexes[uint8a[i]];\n  }\n  return hex;\n}\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nfunction numTo32bStr(num) {\n  if (typeof num !== 'bigint') throw new Error('Expected bigint');\n  if (!(_0n <= num && num < POW_2_256)) throw new Error('Expected number < 2^256');\n  return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n  const b = hexToBytes(numTo32bStr(num));\n  if (b.length !== 32) throw new Error('Error: expected 32 bytes');\n  return b;\n}\nfunction numberToHexUnpadded(num) {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n  }\n  return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n  }\n  if (hex.length % 2) throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n  const array = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\nfunction bytesToNumber(bytes) {\n  return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n  return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n  if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0) return BigInt(num);\n  if (typeof num === 'bigint' && isWithinCurveOrder(num)) return num;\n  throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a) {\n  let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n  const {\n    P\n  } = CURVE;\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= P;\n  }\n  return res;\n}\nfunction sqrtMod(x) {\n  const {\n    P\n  } = CURVE;\n  const _6n = BigInt(6);\n  const _11n = BigInt(11);\n  const _22n = BigInt(22);\n  const _23n = BigInt(23);\n  const _44n = BigInt(44);\n  const _88n = BigInt(88);\n  const b2 = x * x * x % P;\n  const b3 = b2 * b2 * x % P;\n  const b6 = pow2(b3, _3n) * b3 % P;\n  const b9 = pow2(b6, _3n) * b3 % P;\n  const b11 = pow2(b9, _2n) * b2 % P;\n  const b22 = pow2(b11, _11n) * b11 % P;\n  const b44 = pow2(b22, _22n) * b22 % P;\n  const b88 = pow2(b44, _44n) * b44 % P;\n  const b176 = pow2(b88, _88n) * b88 % P;\n  const b220 = pow2(b176, _44n) * b44 % P;\n  const b223 = pow2(b220, _3n) * b3 % P;\n  const t1 = pow2(b223, _23n) * b22 % P;\n  const t2 = pow2(t1, _6n) * b2 % P;\n  return pow2(t2, _2n);\n}\nfunction invert(number) {\n  let modulo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  let a = mod(number, modulo);\n  let b = modulo;\n  let x = _0n,\n    y = _1n,\n    u = _1n,\n    v = _0n;\n  while (a !== _0n) {\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\nfunction invertBatch(nums) {\n  let p = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n  const scratch = new Array(nums.length);\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (num === _0n) return acc;\n    scratch[i] = acc;\n    return mod(acc * num, p);\n  }, _1n);\n  const inverted = invert(lastMultiplied, p);\n  nums.reduceRight((acc, num, i) => {\n    if (num === _0n) return acc;\n    scratch[i] = mod(acc * scratch[i], p);\n    return mod(acc * num, p);\n  }, inverted);\n  return scratch;\n}\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst ENDO = {\n  a1: BigInt('0x3086d221a7d46bcde86c90e49284eb15'),\n  b1: -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3'),\n  a2: BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8'),\n  b2: BigInt('0x3086d221a7d46bcde86c90e49284eb15'),\n  POW_2_128: BigInt('0x100000000000000000000000000000000')\n};\nfunction splitScalarEndo(k) {\n  const {\n    n\n  } = CURVE;\n  const {\n    a1,\n    b1,\n    a2,\n    b2,\n    POW_2_128\n  } = ENDO;\n  const c1 = divNearest(b2 * k, n);\n  const c2 = divNearest(-b1 * k, n);\n  let k1 = mod(k - c1 * a1 - c2 * a2, n);\n  let k2 = mod(-c1 * b1 - c2 * b2, n);\n  const k1neg = k1 > POW_2_128;\n  const k2neg = k2 > POW_2_128;\n  if (k1neg) k1 = n - k1;\n  if (k2neg) k2 = n - k2;\n  if (k1 > POW_2_128 || k2 > POW_2_128) {\n    throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n  }\n  return {\n    k1neg,\n    k1,\n    k2neg,\n    k2\n  };\n}\nfunction truncateHash(hash) {\n  const {\n    n\n  } = CURVE;\n  const byteLength = hash.length;\n  const delta = byteLength * 8 - 256;\n  let h = bytesToNumber(hash);\n  if (delta > 0) h = h >> BigInt(delta);\n  if (h >= n) h -= n;\n  return h;\n}\nlet _sha256Sync;\nlet _hmacSha256Sync;\nclass HmacDrbg {\n  constructor() {\n    this.v = new Uint8Array(32).fill(1);\n    this.k = new Uint8Array(32).fill(0);\n    this.counter = 0;\n  }\n  hmac() {\n    for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      values[_key2] = arguments[_key2];\n    }\n    return utils.hmacSha256(this.k, ...values);\n  }\n  hmacSync() {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n    return _hmacSha256Sync(this.k, ...values);\n  }\n  checkSync() {\n    if (typeof _hmacSha256Sync !== 'function') throw new ShaError('hmacSha256Sync needs to be set');\n  }\n  incr() {\n    if (this.counter >= 1000) throw new Error('Tried 1,000 k values for sign(), all were invalid');\n    this.counter += 1;\n  }\n  async reseed() {\n    let seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Uint8Array();\n    this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n    this.v = await this.hmac(this.v);\n    if (seed.length === 0) return;\n    this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n    this.v = await this.hmac(this.v);\n  }\n  reseedSync() {\n    let seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Uint8Array();\n    this.checkSync();\n    this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n    this.v = this.hmacSync(this.v);\n    if (seed.length === 0) return;\n    this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n    this.v = this.hmacSync(this.v);\n  }\n  async generate() {\n    this.incr();\n    this.v = await this.hmac(this.v);\n    return this.v;\n  }\n  generateSync() {\n    this.checkSync();\n    this.incr();\n    this.v = this.hmacSync(this.v);\n    return this.v;\n  }\n}\nfunction isWithinCurveOrder(num) {\n  return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n  return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d) {\n  const k = bytesToNumber(kBytes);\n  if (!isWithinCurveOrder(k)) return;\n  const {\n    n\n  } = CURVE;\n  const q = Point.BASE.multiply(k);\n  const r = mod(q.x, n);\n  if (r === _0n) return;\n  const s = mod(invert(k, n) * mod(m + d * r, n), n);\n  if (s === _0n) return;\n  const sig = new Signature(r, s);\n  const recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n  return {\n    sig,\n    recovery\n  };\n}\nfunction normalizePrivateKey(key) {\n  let num;\n  if (typeof key === 'bigint') {\n    num = key;\n  } else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n    num = BigInt(key);\n  } else if (typeof key === 'string') {\n    if (key.length !== 64) throw new Error('Expected 32 bytes of private key');\n    num = hexToNumber(key);\n  } else if (key instanceof Uint8Array) {\n    if (key.length !== 32) throw new Error('Expected 32 bytes of private key');\n    num = bytesToNumber(key);\n  } else {\n    throw new TypeError('Expected valid private key');\n  }\n  if (!isWithinCurveOrder(num)) throw new Error('Expected private key: 0 < key < n');\n  return num;\n}\nfunction normalizePublicKey(publicKey) {\n  if (publicKey instanceof Point) {\n    publicKey.assertValidity();\n    return publicKey;\n  } else {\n    return Point.fromHex(publicKey);\n  }\n}\nfunction normalizeSignature(signature) {\n  if (signature instanceof Signature) {\n    signature.assertValidity();\n    return signature;\n  }\n  try {\n    return Signature.fromDER(signature);\n  } catch (error) {\n    return Signature.fromCompact(signature);\n  }\n}\nexport function getPublicKey(privateKey) {\n  let isCompressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery) {\n  let isCompressed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isProbPub(item) {\n  const arr = item instanceof Uint8Array;\n  const str = typeof item === 'string';\n  const len = (arr || str) && item.length;\n  if (arr) return len === 33 || len === 65;\n  if (str) return len === 66 || len === 130;\n  if (item instanceof Point) return true;\n  return false;\n}\nexport function getSharedSecret(privateA, publicB) {\n  let isCompressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (isProbPub(privateA)) throw new TypeError('getSharedSecret: first arg must be private key');\n  if (!isProbPub(publicB)) throw new TypeError('getSharedSecret: second arg must be public key');\n  const b = normalizePublicKey(publicB);\n  b.assertValidity();\n  return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n  const slice = bytes.length > 32 ? bytes.slice(0, 32) : bytes;\n  return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n  const z1 = bits2int(bytes);\n  const z2 = mod(z1, CURVE.n);\n  return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n  return numTo32b(num);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n  if (msgHash == null) throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n  const h1 = ensureBytes(msgHash);\n  const d = normalizePrivateKey(privateKey);\n  const seedArgs = [int2octets(d), bits2octets(h1)];\n  if (extraEntropy != null) {\n    if (extraEntropy === true) extraEntropy = utils.randomBytes(32);\n    const e = ensureBytes(extraEntropy);\n    if (e.length !== 32) throw new Error('sign: Expected 32 bytes of extra data');\n    seedArgs.push(e);\n  }\n  const seed = concatBytes(...seedArgs);\n  const m = bits2int(h1);\n  return {\n    seed,\n    m,\n    d\n  };\n}\nfunction finalizeSig(recSig, opts) {\n  let {\n    sig,\n    recovery\n  } = recSig;\n  const {\n    canonical,\n    der,\n    recovered\n  } = Object.assign({\n    canonical: true,\n    der: true\n  }, opts);\n  if (canonical && sig.hasHighS()) {\n    sig = sig.normalizeS();\n    recovery ^= 1;\n  }\n  const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n  return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    seed,\n    m,\n    d\n  } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n  let sig;\n  const drbg = new HmacDrbg();\n  await drbg.reseed(seed);\n  while (!(sig = kmdToSig(await drbg.generate(), m, d))) await drbg.reseed();\n  return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    seed,\n    m,\n    d\n  } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n  let sig;\n  const drbg = new HmacDrbg();\n  drbg.reseedSync(seed);\n  while (!(sig = kmdToSig(drbg.generateSync(), m, d))) drbg.reseedSync();\n  return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = {\n  strict: true\n};\nexport function verify(signature, msgHash, publicKey) {\n  let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : vopts;\n  let sig;\n  try {\n    sig = normalizeSignature(signature);\n    msgHash = ensureBytes(msgHash);\n  } catch (error) {\n    return false;\n  }\n  const {\n    r,\n    s\n  } = sig;\n  if (opts.strict && sig.hasHighS()) return false;\n  const h = truncateHash(msgHash);\n  let P;\n  try {\n    P = normalizePublicKey(publicKey);\n  } catch (error) {\n    return false;\n  }\n  const {\n    n\n  } = CURVE;\n  const sinv = invert(s, n);\n  const u1 = mod(h * sinv, n);\n  const u2 = mod(r * sinv, n);\n  const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n  if (!R) return false;\n  const v = mod(R.x, n);\n  return v === r;\n}\nfunction schnorrChallengeFinalize(ch) {\n  return mod(bytesToNumber(ch), CURVE.n);\n}\nclass SchnorrSignature {\n  constructor(r, s) {\n    this.r = r;\n    this.s = s;\n    this.assertValidity();\n  }\n  static fromHex(hex) {\n    const bytes = ensureBytes(hex);\n    if (bytes.length !== 64) throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n    const r = bytesToNumber(bytes.subarray(0, 32));\n    const s = bytesToNumber(bytes.subarray(32, 64));\n    return new SchnorrSignature(r, s);\n  }\n  assertValidity() {\n    const {\n      r,\n      s\n    } = this;\n    if (!isValidFieldElement(r) || !isWithinCurveOrder(s)) throw new Error('Invalid signature');\n  }\n  toHex() {\n    return numTo32bStr(this.r) + numTo32bStr(this.s);\n  }\n  toRawBytes() {\n    return hexToBytes(this.toHex());\n  }\n}\nfunction schnorrGetPublicKey(privateKey) {\n  return Point.fromPrivateKey(privateKey).toRawX();\n}\nclass InternalSchnorrSignature {\n  constructor(message, privateKey) {\n    let auxRand = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : utils.randomBytes();\n    if (message == null) throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n    this.m = ensureBytes(message);\n    const {\n      x,\n      scalar\n    } = this.getScalar(normalizePrivateKey(privateKey));\n    this.px = x;\n    this.d = scalar;\n    this.rand = ensureBytes(auxRand);\n    if (this.rand.length !== 32) throw new TypeError('sign: Expected 32 bytes of aux randomness');\n  }\n  getScalar(priv) {\n    const point = Point.fromPrivateKey(priv);\n    const scalar = point.hasEvenY() ? priv : CURVE.n - priv;\n    return {\n      point,\n      scalar,\n      x: point.toRawX()\n    };\n  }\n  initNonce(d, t0h) {\n    return numTo32b(d ^ bytesToNumber(t0h));\n  }\n  finalizeNonce(k0h) {\n    const k0 = mod(bytesToNumber(k0h), CURVE.n);\n    if (k0 === _0n) throw new Error('sign: Creation of signature failed. k is zero');\n    const {\n      point: R,\n      x: rx,\n      scalar: k\n    } = this.getScalar(k0);\n    return {\n      R,\n      rx,\n      k\n    };\n  }\n  finalizeSig(R, k, e, d) {\n    return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n  }\n  error() {\n    throw new Error('sign: Invalid signature produced');\n  }\n  async calc() {\n    const {\n      m,\n      d,\n      px,\n      rand\n    } = this;\n    const tag = utils.taggedHash;\n    const t = this.initNonce(d, await tag(TAGS.aux, rand));\n    const {\n      R,\n      rx,\n      k\n    } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));\n    const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));\n    const sig = this.finalizeSig(R, k, e, d);\n    if (!(await schnorrVerify(sig, m, px))) this.error();\n    return sig;\n  }\n  calcSync() {\n    const {\n      m,\n      d,\n      px,\n      rand\n    } = this;\n    const tag = utils.taggedHashSync;\n    const t = this.initNonce(d, tag(TAGS.aux, rand));\n    const {\n      R,\n      rx,\n      k\n    } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));\n    const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));\n    const sig = this.finalizeSig(R, k, e, d);\n    if (!schnorrVerifySync(sig, m, px)) this.error();\n    return sig;\n  }\n}\nasync function schnorrSign(msg, privKey, auxRand) {\n  return new InternalSchnorrSignature(msg, privKey, auxRand).calc();\n}\nfunction schnorrSignSync(msg, privKey, auxRand) {\n  return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n  const raw = signature instanceof SchnorrSignature;\n  const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n  if (raw) sig.assertValidity();\n  return {\n    ...sig,\n    m: ensureBytes(message),\n    P: normalizePublicKey(publicKey)\n  };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n  const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n  if (!R || !R.hasEvenY() || R.x !== r) return false;\n  return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n  try {\n    const {\n      r,\n      s,\n      m,\n      P\n    } = initSchnorrVerify(signature, message, publicKey);\n    const e = schnorrChallengeFinalize(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n    return finalizeSchnorrVerify(r, P, s, e);\n  } catch (error) {\n    return false;\n  }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n  try {\n    const {\n      r,\n      s,\n      m,\n      P\n    } = initSchnorrVerify(signature, message, publicKey);\n    const e = schnorrChallengeFinalize(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n    return finalizeSchnorrVerify(r, P, s, e);\n  } catch (error) {\n    if (error instanceof ShaError) throw error;\n    return false;\n  }\n}\nexport const schnorr = {\n  Signature: SchnorrSignature,\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  signSync: schnorrSignSync,\n  verifySync: schnorrVerifySync\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n  node: nodeCrypto,\n  web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined\n};\nconst TAGS = {\n  challenge: 'BIP0340/challenge',\n  aux: 'BIP0340/aux',\n  nonce: 'BIP0340/nonce'\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n  bytesToHex,\n  hexToBytes,\n  concatBytes,\n  mod,\n  invert,\n  isValidPrivateKey(privateKey) {\n    try {\n      normalizePrivateKey(privateKey);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  },\n  _bigintTo32Bytes: numTo32b,\n  _normalizePrivateKey: normalizePrivateKey,\n  hashToPrivateKey: hash => {\n    hash = ensureBytes(hash);\n    if (hash.length < 40 || hash.length > 1024) throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n    const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n    return numTo32b(num);\n  },\n  randomBytes: function () {\n    let bytesLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 32;\n    if (crypto.web) {\n      return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    } else if (crypto.node) {\n      const {\n        randomBytes\n      } = crypto.node;\n      return Uint8Array.from(randomBytes(bytesLength));\n    } else {\n      throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n  },\n  randomPrivateKey: () => {\n    return utils.hashToPrivateKey(utils.randomBytes(40));\n  },\n  sha256: async function () {\n    for (var _len4 = arguments.length, messages = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      messages[_key4] = arguments[_key4];\n    }\n    if (crypto.web) {\n      const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n      return new Uint8Array(buffer);\n    } else if (crypto.node) {\n      const {\n        createHash\n      } = crypto.node;\n      const hash = createHash('sha256');\n      messages.forEach(m => hash.update(m));\n      return Uint8Array.from(hash.digest());\n    } else {\n      throw new Error(\"The environment doesn't have sha256 function\");\n    }\n  },\n  hmacSha256: async function (key) {\n    for (var _len5 = arguments.length, messages = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n      messages[_key5 - 1] = arguments[_key5];\n    }\n    if (crypto.web) {\n      const ckey = await crypto.web.subtle.importKey('raw', key, {\n        name: 'HMAC',\n        hash: {\n          name: 'SHA-256'\n        }\n      }, false, ['sign']);\n      const message = concatBytes(...messages);\n      const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n      return new Uint8Array(buffer);\n    } else if (crypto.node) {\n      const {\n        createHmac\n      } = crypto.node;\n      const hash = createHmac('sha256', key);\n      messages.forEach(m => hash.update(m));\n      return Uint8Array.from(hash.digest());\n    } else {\n      throw new Error(\"The environment doesn't have hmac-sha256 function\");\n    }\n  },\n  sha256Sync: undefined,\n  hmacSha256Sync: undefined,\n  taggedHash: async function (tag) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n      const tagH = await utils.sha256(Uint8Array.from(tag, c => c.charCodeAt(0)));\n      tagP = concatBytes(tagH, tagH);\n      TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    for (var _len6 = arguments.length, messages = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n      messages[_key6 - 1] = arguments[_key6];\n    }\n    return utils.sha256(tagP, ...messages);\n  },\n  taggedHashSync: function (tag) {\n    if (typeof _sha256Sync !== 'function') throw new ShaError('sha256Sync is undefined, you need to set it');\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n      const tagH = _sha256Sync(Uint8Array.from(tag, c => c.charCodeAt(0)));\n      tagP = concatBytes(tagH, tagH);\n      TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    for (var _len7 = arguments.length, messages = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n      messages[_key7 - 1] = arguments[_key7];\n    }\n    return _sha256Sync(tagP, ...messages);\n  },\n  precompute() {\n    let windowSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;\n    let point = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Point.BASE;\n    const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n    cached._setWindowSize(windowSize);\n    cached.multiply(_3n);\n    return cached;\n  }\n};\nObject.defineProperties(utils, {\n  sha256Sync: {\n    configurable: false,\n    get() {\n      return _sha256Sync;\n    },\n    set(val) {\n      if (!_sha256Sync) _sha256Sync = val;\n    }\n  },\n  hmacSha256Sync: {\n    configurable: false,\n    get() {\n      return _hmacSha256Sync;\n    },\n    set(val) {\n      if (!_hmacSha256Sync) _hmacSha256Sync = val;\n    }\n  }\n});","map":{"version":3,"names":["nodeCrypto","_0n","BigInt","_1n","_2n","_3n","_8n","CURVE","Object","freeze","a","b","P","n","h","Gx","Gy","beta","weistrass","x","x2","mod","x3","USE_ENDOMORPHISM","ShaError","Error","constructor","message","JacobianPoint","y","z","fromAffine","p","Point","TypeError","toAffineBatch","points","toInv","invertBatch","map","i","toAffine","normalizeZ","equals","other","X1","Y1","Z1","X2","Y2","Z2","Z1Z1","Z2Z2","U1","U2","S1","S2","negate","double","A","B","C","x1b","D","E","F","X3","Y3","Z3","add","H","r","ZERO","HH","HHH","V","subtract","multiplyUnsafe","scalar","P0","normalizeScalar","d","k1neg","k1","k2neg","k2","splitScalarEndo","k1p","k2p","precomputeWindow","W","windows","base","window","push","wNAF","affinePoint","BASE","_WINDOW_SIZE","precomputes","pointPrecomputes","get","set","f","windowSize","mask","maxNumber","shiftBy","offset","wbits","Number","pr","cached","Math","abs","multiply","point","fake","f1p","f2p","invZ","invert","iz1","iz2","iz3","ax","ay","zz","WeakMap","_setWindowSize","delete","hasEvenY","fromCompressedHex","bytes","isShort","length","bytesToNumber","subarray","isValidFieldElement","y2","sqrtMod","isYOdd","isFirstByteOdd","assertValidity","fromUncompressedHex","fromHex","hex","ensureBytes","len","header","fromPrivateKey","privateKey","normalizePrivateKey","fromSignature","msgHash","signature","recovery","truncateHash","s","normalizeSignature","prefix","R","numTo32bStr","rinv","u1","u2","Q","multiplyAndAddUnsafe","toRawBytes","isCompressed","hexToBytes","toHex","toHexX","slice","toRawX","msg","left","right","aP","bQ","sum","undefined","sliceDER","parseInt","parseDERInt","data","bytesToHex","res","parseDERSignature","sBytes","rBytesLeft","Signature","fromCompact","arr","Uint8Array","name","str","hexToNumber","fromDER","isWithinCurveOrder","hasHighS","HALF","normalizeS","toDERRawBytes","toDERHex","sHex","numberToHexUnpadded","rHex","rLen","sLen","toCompactRawBytes","toCompactHex","concatBytes","arrays","every","reduce","result","pad","hexes","Array","from","v","toString","padStart","uint8a","POW_2_256","num","numTo32b","array","j","hexByte","byte","isNaN","isSafeInteger","pow2","power","_6n","_11n","_22n","_23n","_44n","_88n","b2","b3","b6","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","number","modulo","u","q","m","gcd","nums","scratch","lastMultiplied","acc","inverted","reduceRight","divNearest","ENDO","a1","b1","a2","POW_2_128","k","c1","c2","hash","byteLength","delta","_sha256Sync","_hmacSha256Sync","HmacDrbg","fill","counter","hmac","values","utils","hmacSha256","hmacSync","checkSync","incr","reseed","seed","reseedSync","generate","generateSync","kmdToSig","kBytes","sig","key","normalizePublicKey","publicKey","error","getPublicKey","recoverPublicKey","isProbPub","item","getSharedSecret","privateA","publicB","bits2int","bits2octets","z1","z2","int2octets","initSigArgs","extraEntropy","h1","seedArgs","randomBytes","e","finalizeSig","recSig","opts","canonical","der","recovered","assign","hashed","sign","privKey","drbg","signSync","vopts","strict","verify","sinv","schnorrChallengeFinalize","ch","SchnorrSignature","schnorrGetPublicKey","InternalSchnorrSignature","auxRand","getScalar","px","rand","priv","initNonce","t0h","finalizeNonce","k0h","k0","rx","calc","tag","taggedHash","t","TAGS","aux","nonce","challenge","schnorrVerify","calcSync","taggedHashSync","schnorrVerifySync","schnorrSign","schnorrSignSync","initSchnorrVerify","raw","finalizeSchnorrVerify","schnorr","verifySync","crypto","node","web","self","TAGGED_HASH_PREFIXES","isValidPrivateKey","_bigintTo32Bytes","_normalizePrivateKey","hashToPrivateKey","bytesLength","getRandomValues","randomPrivateKey","sha256","messages","buffer","subtle","digest","createHash","forEach","update","ckey","importKey","createHmac","sha256Sync","hmacSha256Sync","tagP","tagH","c","charCodeAt","precompute","defineProperties","configurable","val"],"sources":["/home/sotatek/Downloads/React-Solana-Template/node_modules/@noble/secp256k1/lib/esm/index.js"],"sourcesContent":["/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst CURVE = Object.freeze({\n    a: _0n,\n    b: BigInt(7),\n    P: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n});\nexport { CURVE };\nfunction weistrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass ShaError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(B * B);\n        const x1b = X1 + B;\n        const D = mod(_2n * (mod(x1b * x1b) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E * E);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H * H);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r * r - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.ZERO;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ = invert(this.z)) {\n        const { x, y, z } = this;\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    hasEvenY() {\n        return this.y % _2n === _0n;\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weistrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, 33));\n        const y = bytesToNumber(bytes.subarray(33, 65));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === 32 || (len === 33 && (header === 0x02 || header === 0x03))) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === 65 && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        msgHash = ensureBytes(msgHash);\n        const h = truncateHash(msgHash);\n        const { r, s } = normalizeSignature(signature);\n        if (recovery !== 0 && recovery !== 1) {\n            throw new Error('Cannot recover signature: invalid recovery bit');\n        }\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(r));\n        const { n } = CURVE;\n        const rinv = invert(r, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.hasEvenY() ? '02' : '03';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weistrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = hex instanceof Uint8Array;\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = hex instanceof Uint8Array;\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, CURVE.n - this.s) : this;\n    }\n    toDERRawBytes(isCompressed = false) {\n        return hexToBytes(this.toDERHex(isCompressed));\n    }\n    toDERHex(isCompressed = false) {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        if (isCompressed)\n            return sHex;\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const rLen = numberToHexUnpadded(rHex.length / 2);\n        const sLen = numberToHexUnpadded(sHex.length / 2);\n        const length = numberToHexUnpadded(rHex.length / 2 + sHex.length / 2 + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (!arrays.every((b) => b instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nfunction numTo32bStr(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    if (!(_0n <= num && num < POW_2_256))\n        throw new Error('Expected number < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    const b = hexToBytes(numTo32bStr(num));\n    if (b.length !== 32)\n        throw new Error('Error: expected 32 bytes');\n    return b;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    return pow2(t2, _2n);\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst ENDO = {\n    a1: BigInt('0x3086d221a7d46bcde86c90e49284eb15'),\n    b1: -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3'),\n    a2: BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8'),\n    b2: BigInt('0x3086d221a7d46bcde86c90e49284eb15'),\n    POW_2_128: BigInt('0x100000000000000000000000000000000'),\n};\nfunction splitScalarEndo(k) {\n    const { n } = CURVE;\n    const { a1, b1, a2, b2, POW_2_128 } = ENDO;\n    const c1 = divNearest(b2 * k, n);\n    const c2 = divNearest(-b1 * k, n);\n    let k1 = mod(k - c1 * a1 - c2 * a2, n);\n    let k2 = mod(-c1 * b1 - c2 * b2, n);\n    const k1neg = k1 > POW_2_128;\n    const k2neg = k2 > POW_2_128;\n    if (k1neg)\n        k1 = n - k1;\n    if (k2neg)\n        k2 = n - k2;\n    if (k1 > POW_2_128 || k2 > POW_2_128) {\n        throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n    }\n    return { k1neg, k1, k2neg, k2 };\n}\nfunction truncateHash(hash) {\n    const { n } = CURVE;\n    const byteLength = hash.length;\n    const delta = byteLength * 8 - 256;\n    let h = bytesToNumber(hash);\n    if (delta > 0)\n        h = h >> BigInt(delta);\n    if (h >= n)\n        h -= n;\n    return h;\n}\nlet _sha256Sync;\nlet _hmacSha256Sync;\nclass HmacDrbg {\n    constructor() {\n        this.v = new Uint8Array(32).fill(1);\n        this.k = new Uint8Array(32).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        return _hmacSha256Sync(this.k, ...values);\n    }\n    checkSync() {\n        if (typeof _hmacSha256Sync !== 'function')\n            throw new ShaError('hmacSha256Sync needs to be set');\n    }\n    incr() {\n        if (this.counter >= 1000)\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.checkSync();\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        this.v = await this.hmac(this.v);\n        return this.v;\n    }\n    generateSync() {\n        this.checkSync();\n        this.incr();\n        this.v = this.hmacSync(this.v);\n        return this.v;\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d) {\n    const k = bytesToNumber(kBytes);\n    if (!isWithinCurveOrder(k))\n        return;\n    const { n } = CURVE;\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(invert(k, n) * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    const sig = new Signature(r, s);\n    const recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 64)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (key instanceof Uint8Array) {\n        if (key.length !== 32)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isProbPub(item) {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === 33 || len === 65;\n    if (str)\n        return len === 66 || len === 130;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isProbPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isProbPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n    const slice = bytes.length > 32 ? bytes.slice(0, 32) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    return numTo32b(num);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = utils.randomBytes(32);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== 32)\n            throw new Error('sign: Expected 32 bytes of extra data');\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    let { sig, recovery } = recSig;\n    const { canonical, der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    if (canonical && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    await drbg.reseed(seed);\n    while (!(sig = kmdToSig(await drbg.generate(), m, d)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    drbg.reseedSync(seed);\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nfunction schnorrChallengeFinalize(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nclass InternalSchnorrSignature {\n    constructor(message, privateKey, auxRand = utils.randomBytes()) {\n        if (message == null)\n            throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n        this.m = ensureBytes(message);\n        const { x, scalar } = this.getScalar(normalizePrivateKey(privateKey));\n        this.px = x;\n        this.d = scalar;\n        this.rand = ensureBytes(auxRand);\n        if (this.rand.length !== 32)\n            throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    }\n    getScalar(priv) {\n        const point = Point.fromPrivateKey(priv);\n        const scalar = point.hasEvenY() ? priv : CURVE.n - priv;\n        return { point, scalar, x: point.toRawX() };\n    }\n    initNonce(d, t0h) {\n        return numTo32b(d ^ bytesToNumber(t0h));\n    }\n    finalizeNonce(k0h) {\n        const k0 = mod(bytesToNumber(k0h), CURVE.n);\n        if (k0 === _0n)\n            throw new Error('sign: Creation of signature failed. k is zero');\n        const { point: R, x: rx, scalar: k } = this.getScalar(k0);\n        return { R, rx, k };\n    }\n    finalizeSig(R, k, e, d) {\n        return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n    }\n    error() {\n        throw new Error('sign: Invalid signature produced');\n    }\n    async calc() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHash;\n        const t = this.initNonce(d, await tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!(await schnorrVerify(sig, m, px)))\n            this.error();\n        return sig;\n    }\n    calcSync() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHashSync;\n        const t = this.initNonce(d, tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!schnorrVerifySync(sig, m, px))\n            this.error();\n        return sig;\n    }\n}\nasync function schnorrSign(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calc();\n}\nfunction schnorrSignSync(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !R.hasEvenY() || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        if (error instanceof ShaError)\n            throw error;\n        return false;\n    }\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    _bigintTo32Bytes: numTo32b,\n    _normalizePrivateKey: normalizePrivateKey,\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.hashToPrivateKey(utils.randomBytes(40));\n    },\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof _sha256Sync !== 'function')\n            throw new ShaError('sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = _sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return _sha256Sync(tagP, ...messages);\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n};\nObject.defineProperties(utils, {\n    sha256Sync: {\n        configurable: false,\n        get() {\n            return _sha256Sync;\n        },\n        set(val) {\n            if (!_sha256Sync)\n                _sha256Sync = val;\n        },\n    },\n    hmacSha256Sync: {\n        configurable: false,\n        get() {\n            return _hmacSha256Sync;\n        },\n        set(val) {\n            if (!_hmacSha256Sync)\n                _hmacSha256Sync = val;\n        },\n    },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}